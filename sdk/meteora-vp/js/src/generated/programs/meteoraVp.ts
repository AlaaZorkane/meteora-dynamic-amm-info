/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { type ParsedGetVirtualPriceInstruction } from '../instructions';

export const METEORA_VP_PROGRAM_ADDRESS = '' as Address<''>;

export enum MeteoraVpInstruction {
  GetVirtualPrice,
}

export function identifyMeteoraVpInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MeteoraVpInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 165, 98, 171, 1, 184, 61, 157])
      ),
      0
    )
  ) {
    return MeteoraVpInstruction.GetVirtualPrice;
  }
  throw new Error(
    'The provided instruction could not be identified as a meteoraVp instruction.'
  );
}

export type ParsedMeteoraVpInstruction<TProgram extends string = ''> = {
  instructionType: MeteoraVpInstruction.GetVirtualPrice;
} & ParsedGetVirtualPriceInstruction<TProgram>;

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { METEORA_VP_PROGRAM_ADDRESS } from '../programs';

/** TypeConversionFailed: Type conversion failed */
export const METEORA_VP_ERROR__TYPE_CONVERSION_FAILED = 0x1770; // 6000
/** CheckedCalculationOverflow: Checked Calculation overflowed */
export const METEORA_VP_ERROR__CHECKED_CALCULATION_OVERFLOW = 0x1771; // 6001
/** InvalidAmountByShare: Invalid amount by share */
export const METEORA_VP_ERROR__INVALID_AMOUNT_BY_SHARE = 0x1772; // 6002
/** InvalidUpscaledTokenAmount: Invalid upscaled token amount */
export const METEORA_VP_ERROR__INVALID_UPSCALED_TOKEN_AMOUNT = 0x1773; // 6003

export type MeteoraVpError =
  | typeof METEORA_VP_ERROR__CHECKED_CALCULATION_OVERFLOW
  | typeof METEORA_VP_ERROR__INVALID_AMOUNT_BY_SHARE
  | typeof METEORA_VP_ERROR__INVALID_UPSCALED_TOKEN_AMOUNT
  | typeof METEORA_VP_ERROR__TYPE_CONVERSION_FAILED;

let meteoraVpErrorMessages: Record<MeteoraVpError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  meteoraVpErrorMessages = {
    [METEORA_VP_ERROR__CHECKED_CALCULATION_OVERFLOW]: `Checked Calculation overflowed`,
    [METEORA_VP_ERROR__INVALID_AMOUNT_BY_SHARE]: `Invalid amount by share`,
    [METEORA_VP_ERROR__INVALID_UPSCALED_TOKEN_AMOUNT]: `Invalid upscaled token amount`,
    [METEORA_VP_ERROR__TYPE_CONVERSION_FAILED]: `Type conversion failed`,
  };
}

export function getMeteoraVpErrorMessage(code: MeteoraVpError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (meteoraVpErrorMessages as Record<MeteoraVpError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isMeteoraVpError<TProgramErrorCode extends MeteoraVpError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    METEORA_VP_PROGRAM_ADDRESS,
    code
  );
}

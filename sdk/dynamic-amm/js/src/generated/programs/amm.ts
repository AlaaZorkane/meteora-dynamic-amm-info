/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedAddBalanceLiquidityInstruction,
  type ParsedAddImbalanceLiquidityInstruction,
  type ParsedBootstrapLiquidityInstruction,
  type ParsedClaimFeeInstruction,
  type ParsedCloseConfigInstruction,
  type ParsedCreateConfigInstruction,
  type ParsedCreateLockEscrowInstruction,
  type ParsedCreateMintMetadataInstruction,
  type ParsedEnableOrDisablePoolInstruction,
  type ParsedGetPoolInfoInstruction,
  type ParsedInitializeCustomizablePermissionlessConstantProductPoolInstruction,
  type ParsedInitializePermissionedPoolInstruction,
  type ParsedInitializePermissionlessConstantProductPoolWithConfig2Instruction,
  type ParsedInitializePermissionlessConstantProductPoolWithConfigInstruction,
  type ParsedInitializePermissionlessPoolInstruction,
  type ParsedInitializePermissionlessPoolWithFeeTierInstruction,
  type ParsedLockInstruction,
  type ParsedOverrideCurveParamInstruction,
  type ParsedPartnerClaimFeeInstruction,
  type ParsedRemoveBalanceLiquidityInstruction,
  type ParsedRemoveLiquiditySingleSideInstruction,
  type ParsedSetPoolFeesInstruction,
  type ParsedSetWhitelistedVaultInstruction,
  type ParsedSwapInstruction,
  type ParsedUpdateActivationPointInstruction,
  type ParsedWithdrawProtocolFeesInstruction,
} from '../instructions';

export const AMM_PROGRAM_ADDRESS = '' as Address<''>;

export enum AmmAccount {
  Config,
  LockEscrow,
  Pool,
}

export function identifyAmmAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return AmmAccount.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([190, 106, 121, 6, 200, 182, 21, 75])
      ),
      0
    )
  ) {
    return AmmAccount.LockEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
      ),
      0
    )
  ) {
    return AmmAccount.Pool;
  }
  throw new Error(
    'The provided account could not be identified as a amm account.'
  );
}

export enum AmmInstruction {
  InitializePermissionedPool,
  InitializePermissionlessPool,
  InitializePermissionlessPoolWithFeeTier,
  EnableOrDisablePool,
  Swap,
  RemoveLiquiditySingleSide,
  AddImbalanceLiquidity,
  RemoveBalanceLiquidity,
  AddBalanceLiquidity,
  SetPoolFees,
  OverrideCurveParam,
  GetPoolInfo,
  BootstrapLiquidity,
  CreateMintMetadata,
  CreateLockEscrow,
  Lock,
  ClaimFee,
  CreateConfig,
  CloseConfig,
  InitializePermissionlessConstantProductPoolWithConfig,
  InitializePermissionlessConstantProductPoolWithConfig2,
  InitializeCustomizablePermissionlessConstantProductPool,
  UpdateActivationPoint,
  WithdrawProtocolFees,
  SetWhitelistedVault,
  PartnerClaimFee,
}

export function identifyAmmInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([77, 85, 178, 157, 50, 48, 212, 126])
      ),
      0
    )
  ) {
    return AmmInstruction.InitializePermissionedPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([118, 173, 41, 157, 173, 72, 97, 103])
      ),
      0
    )
  ) {
    return AmmInstruction.InitializePermissionlessPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([6, 135, 68, 147, 229, 82, 169, 113])
      ),
      0
    )
  ) {
    return AmmInstruction.InitializePermissionlessPoolWithFeeTier;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 6, 228, 131, 55, 161, 52, 169])
      ),
      0
    )
  ) {
    return AmmInstruction.EnableOrDisablePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 198, 158, 145, 225, 117, 135, 200])
      ),
      0
    )
  ) {
    return AmmInstruction.Swap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 84, 177, 66, 254, 185, 10, 251])
      ),
      0
    )
  ) {
    return AmmInstruction.RemoveLiquiditySingleSide;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([79, 35, 122, 84, 173, 15, 93, 191])
      ),
      0
    )
  ) {
    return AmmInstruction.AddImbalanceLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 109, 44, 179, 56, 238, 114, 33])
      ),
      0
    )
  ) {
    return AmmInstruction.RemoveBalanceLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 227, 50, 62, 189, 171, 84, 176])
      ),
      0
    )
  ) {
    return AmmInstruction.AddBalanceLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 44, 158, 54, 205, 37, 126, 78])
      ),
      0
    )
  ) {
    return AmmInstruction.SetPoolFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 86, 204, 51, 94, 71, 69, 187])
      ),
      0
    )
  ) {
    return AmmInstruction.OverrideCurveParam;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 48, 220, 101, 22, 240, 78, 200])
      ),
      0
    )
  ) {
    return AmmInstruction.GetPoolInfo;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([4, 228, 215, 71, 225, 253, 119, 206])
      ),
      0
    )
  ) {
    return AmmInstruction.BootstrapLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 70, 168, 41, 250, 100, 148, 90])
      ),
      0
    )
  ) {
    return AmmInstruction.CreateMintMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 87, 165, 19, 69, 227, 218, 224])
      ),
      0
    )
  ) {
    return AmmInstruction.CreateLockEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 19, 208, 43, 237, 62, 255, 87])
      ),
      0
    )
  ) {
    return AmmInstruction.Lock;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 32, 79, 137, 136, 232, 70, 137])
      ),
      0
    )
  ) {
    return AmmInstruction.ClaimFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 207, 243, 114, 75, 111, 47, 189])
      ),
      0
    )
  ) {
    return AmmInstruction.CreateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 9, 72, 157, 95, 125, 61, 85])
      ),
      0
    )
  ) {
    return AmmInstruction.CloseConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 166, 138, 171, 206, 171, 236, 244])
      ),
      0
    )
  ) {
    return AmmInstruction.InitializePermissionlessConstantProductPoolWithConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 149, 220, 130, 61, 11, 9, 178])
      ),
      0
    )
  ) {
    return AmmInstruction.InitializePermissionlessConstantProductPoolWithConfig2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 24, 172, 194, 219, 125, 3, 190])
      ),
      0
    )
  ) {
    return AmmInstruction.InitializeCustomizablePermissionlessConstantProductPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([150, 62, 125, 219, 171, 220, 26, 237])
      ),
      0
    )
  ) {
    return AmmInstruction.UpdateActivationPoint;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 68, 165, 98, 18, 208, 134, 73])
      ),
      0
    )
  ) {
    return AmmInstruction.WithdrawProtocolFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([12, 148, 94, 42, 55, 57, 83, 247])
      ),
      0
    )
  ) {
    return AmmInstruction.SetWhitelistedVault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 53, 176, 30, 123, 70, 52, 64])
      ),
      0
    )
  ) {
    return AmmInstruction.PartnerClaimFee;
  }
  throw new Error(
    'The provided instruction could not be identified as a amm instruction.'
  );
}

export type ParsedAmmInstruction<TProgram extends string = ''> =
  | ({
      instructionType: AmmInstruction.InitializePermissionedPool;
    } & ParsedInitializePermissionedPoolInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.InitializePermissionlessPool;
    } & ParsedInitializePermissionlessPoolInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.InitializePermissionlessPoolWithFeeTier;
    } & ParsedInitializePermissionlessPoolWithFeeTierInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.EnableOrDisablePool;
    } & ParsedEnableOrDisablePoolInstruction<TProgram>)
  | ({ instructionType: AmmInstruction.Swap } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.RemoveLiquiditySingleSide;
    } & ParsedRemoveLiquiditySingleSideInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.AddImbalanceLiquidity;
    } & ParsedAddImbalanceLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.RemoveBalanceLiquidity;
    } & ParsedRemoveBalanceLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.AddBalanceLiquidity;
    } & ParsedAddBalanceLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.SetPoolFees;
    } & ParsedSetPoolFeesInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.OverrideCurveParam;
    } & ParsedOverrideCurveParamInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.GetPoolInfo;
    } & ParsedGetPoolInfoInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.BootstrapLiquidity;
    } & ParsedBootstrapLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.CreateMintMetadata;
    } & ParsedCreateMintMetadataInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.CreateLockEscrow;
    } & ParsedCreateLockEscrowInstruction<TProgram>)
  | ({ instructionType: AmmInstruction.Lock } & ParsedLockInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.ClaimFee;
    } & ParsedClaimFeeInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.CreateConfig;
    } & ParsedCreateConfigInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.CloseConfig;
    } & ParsedCloseConfigInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.InitializePermissionlessConstantProductPoolWithConfig;
    } & ParsedInitializePermissionlessConstantProductPoolWithConfigInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.InitializePermissionlessConstantProductPoolWithConfig2;
    } & ParsedInitializePermissionlessConstantProductPoolWithConfig2Instruction<TProgram>)
  | ({
      instructionType: AmmInstruction.InitializeCustomizablePermissionlessConstantProductPool;
    } & ParsedInitializeCustomizablePermissionlessConstantProductPoolInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.UpdateActivationPoint;
    } & ParsedUpdateActivationPointInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.WithdrawProtocolFees;
    } & ParsedWithdrawProtocolFeesInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.SetWhitelistedVault;
    } & ParsedSetWhitelistedVaultInstruction<TProgram>)
  | ({
      instructionType: AmmInstruction.PartnerClaimFee;
    } & ParsedPartnerClaimFeeInstruction<TProgram>);

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

/** Padding for future pool fields */
export type Padding = {
  /** Padding 0 */
  padding0: ReadonlyUint8Array;
  /** Padding 1 */
  padding1: Array<bigint>;
  /** Padding 2 */
  padding2: Array<bigint>;
};

export type PaddingArgs = {
  /** Padding 0 */
  padding0: ReadonlyUint8Array;
  /** Padding 1 */
  padding1: Array<number | bigint>;
  /** Padding 2 */
  padding2: Array<number | bigint>;
};

export function getPaddingEncoder(): Encoder<PaddingArgs> {
  return getStructEncoder([
    ['padding0', fixEncoderSize(getBytesEncoder(), 6)],
    ['padding1', getArrayEncoder(getU64Encoder(), { size: 21 })],
    ['padding2', getArrayEncoder(getU64Encoder(), { size: 21 })],
  ]);
}

export function getPaddingDecoder(): Decoder<Padding> {
  return getStructDecoder([
    ['padding0', fixDecoderSize(getBytesDecoder(), 6)],
    ['padding1', getArrayDecoder(getU64Decoder(), { size: 21 })],
    ['padding2', getArrayDecoder(getU64Decoder(), { size: 21 })],
  ]);
}

export function getPaddingCodec(): Codec<PaddingArgs, Padding> {
  return combineCodec(getPaddingEncoder(), getPaddingDecoder());
}

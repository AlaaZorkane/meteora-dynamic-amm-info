/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/web3.js';

/** Multiplier for the pool token. Used to normalized token with different decimal into the same precision. */
export type TokenMultiplier = {
  /** Multiplier for token A of the pool. */
  tokenAMultiplier: bigint;
  /** Multiplier for token B of the pool. */
  tokenBMultiplier: bigint;
  /** Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9. */
  precisionFactor: number;
};

export type TokenMultiplierArgs = {
  /** Multiplier for token A of the pool. */
  tokenAMultiplier: number | bigint;
  /** Multiplier for token B of the pool. */
  tokenBMultiplier: number | bigint;
  /** Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9. */
  precisionFactor: number;
};

export function getTokenMultiplierEncoder(): Encoder<TokenMultiplierArgs> {
  return getStructEncoder([
    ['tokenAMultiplier', getU64Encoder()],
    ['tokenBMultiplier', getU64Encoder()],
    ['precisionFactor', getU8Encoder()],
  ]);
}

export function getTokenMultiplierDecoder(): Decoder<TokenMultiplier> {
  return getStructDecoder([
    ['tokenAMultiplier', getU64Decoder()],
    ['tokenBMultiplier', getU64Decoder()],
    ['precisionFactor', getU8Decoder()],
  ]);
}

export function getTokenMultiplierCodec(): Codec<
  TokenMultiplierArgs,
  TokenMultiplier
> {
  return combineCodec(getTokenMultiplierEncoder(), getTokenMultiplierDecoder());
}

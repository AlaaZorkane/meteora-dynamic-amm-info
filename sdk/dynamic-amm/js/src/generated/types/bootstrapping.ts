/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/web3.js';

export type Bootstrapping = {
  /** Activation point, can be slot or timestamp */
  activationPoint: bigint;
  /** Whitelisted vault to be able to buy pool before activation_point */
  whitelistedVault: Address;
  /** Need to store pool creator in lauch pool, so they can modify liquidity before activation_point */
  poolCreator: Address;
  /** Activation type, 0 means by slot, 1 means by timestamp */
  activationType: number;
};

export type BootstrappingArgs = {
  /** Activation point, can be slot or timestamp */
  activationPoint: number | bigint;
  /** Whitelisted vault to be able to buy pool before activation_point */
  whitelistedVault: Address;
  /** Need to store pool creator in lauch pool, so they can modify liquidity before activation_point */
  poolCreator: Address;
  /** Activation type, 0 means by slot, 1 means by timestamp */
  activationType: number;
};

export function getBootstrappingEncoder(): Encoder<BootstrappingArgs> {
  return getStructEncoder([
    ['activationPoint', getU64Encoder()],
    ['whitelistedVault', getAddressEncoder()],
    ['poolCreator', getAddressEncoder()],
    ['activationType', getU8Encoder()],
  ]);
}

export function getBootstrappingDecoder(): Decoder<Bootstrapping> {
  return getStructDecoder([
    ['activationPoint', getU64Decoder()],
    ['whitelistedVault', getAddressDecoder()],
    ['poolCreator', getAddressDecoder()],
    ['activationType', getU8Decoder()],
  ]);
}

export function getBootstrappingCodec(): Codec<
  BootstrappingArgs,
  Bootstrapping
> {
  return combineCodec(getBootstrappingEncoder(), getBootstrappingDecoder());
}

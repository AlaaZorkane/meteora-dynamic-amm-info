/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_FEE_DISCRIMINATOR = new Uint8Array([
  169, 32, 79, 137, 136, 232, 70, 137,
]);

export function getClaimFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_FEE_DISCRIMINATOR);
}

export type ClaimFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountLockEscrow extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSourceTokens extends string | IAccountMeta<string> = string,
  TAccountEscrowVault extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountATokenVault extends string | IAccountMeta<string> = string,
  TAccountBTokenVault extends string | IAccountMeta<string> = string,
  TAccountAVault extends string | IAccountMeta<string> = string,
  TAccountBVault extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountBVaultLp extends string | IAccountMeta<string> = string,
  TAccountAVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountBVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountUserAToken extends string | IAccountMeta<string> = string,
  TAccountUserBToken extends string | IAccountMeta<string> = string,
  TAccountVaultProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountLockEscrow extends string
        ? WritableAccount<TAccountLockEscrow>
        : TAccountLockEscrow,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSourceTokens extends string
        ? WritableAccount<TAccountSourceTokens>
        : TAccountSourceTokens,
      TAccountEscrowVault extends string
        ? WritableAccount<TAccountEscrowVault>
        : TAccountEscrowVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountATokenVault extends string
        ? WritableAccount<TAccountATokenVault>
        : TAccountATokenVault,
      TAccountBTokenVault extends string
        ? WritableAccount<TAccountBTokenVault>
        : TAccountBTokenVault,
      TAccountAVault extends string
        ? WritableAccount<TAccountAVault>
        : TAccountAVault,
      TAccountBVault extends string
        ? WritableAccount<TAccountBVault>
        : TAccountBVault,
      TAccountAVaultLp extends string
        ? WritableAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountBVaultLp extends string
        ? WritableAccount<TAccountBVaultLp>
        : TAccountBVaultLp,
      TAccountAVaultLpMint extends string
        ? WritableAccount<TAccountAVaultLpMint>
        : TAccountAVaultLpMint,
      TAccountBVaultLpMint extends string
        ? WritableAccount<TAccountBVaultLpMint>
        : TAccountBVaultLpMint,
      TAccountUserAToken extends string
        ? WritableAccount<TAccountUserAToken>
        : TAccountUserAToken,
      TAccountUserBToken extends string
        ? WritableAccount<TAccountUserBToken>
        : TAccountUserBToken,
      TAccountVaultProgram extends string
        ? ReadonlyAccount<TAccountVaultProgram>
        : TAccountVaultProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmount: bigint;
};

export type ClaimFeeInstructionDataArgs = { maxAmount: number | bigint };

export function getClaimFeeInstructionDataEncoder(): Encoder<ClaimFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_FEE_DISCRIMINATOR })
  );
}

export function getClaimFeeInstructionDataDecoder(): Decoder<ClaimFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmount', getU64Decoder()],
  ]);
}

export function getClaimFeeInstructionDataCodec(): Codec<
  ClaimFeeInstructionDataArgs,
  ClaimFeeInstructionData
> {
  return combineCodec(
    getClaimFeeInstructionDataEncoder(),
    getClaimFeeInstructionDataDecoder()
  );
}

export type ClaimFeeInput<
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountLockEscrow extends string = string,
  TAccountOwner extends string = string,
  TAccountSourceTokens extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountATokenVault extends string = string,
  TAccountBTokenVault extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
  TAccountUserAToken extends string = string,
  TAccountUserBToken extends string = string,
  TAccountVaultProgram extends string = string,
> = {
  /** Pool account */
  pool: Address<TAccountPool>;
  /** LP token mint of the pool */
  lpMint: Address<TAccountLpMint>;
  /** Lock account */
  lockEscrow: Address<TAccountLockEscrow>;
  /** Owner of lock account */
  owner: TransactionSigner<TAccountOwner>;
  /** owner lp token account */
  sourceTokens: Address<TAccountSourceTokens>;
  /** Escrow vault */
  escrowVault: Address<TAccountEscrowVault>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Token vault account of vault A */
  aTokenVault: Address<TAccountATokenVault>;
  /** Token vault account of vault B */
  bTokenVault: Address<TAccountBTokenVault>;
  /** Vault account for token a. token a of the pool will be deposit / withdraw from this vault account. */
  aVault: Address<TAccountAVault>;
  /** Vault account for token b. token b of the pool will be deposit / withdraw from this vault account. */
  bVault: Address<TAccountBVault>;
  /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  aVaultLp: Address<TAccountAVaultLp>;
  /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  bVaultLp: Address<TAccountBVaultLp>;
  /** LP token mint of vault a */
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  /** LP token mint of vault b */
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  /** User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account. */
  userAToken: Address<TAccountUserAToken>;
  /** User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account. */
  userBToken: Address<TAccountUserBToken>;
  /** Vault program. the pool will deposit/withdraw liquidity from the vault. */
  vaultProgram: Address<TAccountVaultProgram>;
  maxAmount: ClaimFeeInstructionDataArgs['maxAmount'];
};

export function getClaimFeeInstruction<
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountLockEscrow extends string,
  TAccountOwner extends string,
  TAccountSourceTokens extends string,
  TAccountEscrowVault extends string,
  TAccountTokenProgram extends string,
  TAccountATokenVault extends string,
  TAccountBTokenVault extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TAccountUserAToken extends string,
  TAccountUserBToken extends string,
  TAccountVaultProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: ClaimFeeInput<
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountUserAToken,
    TAccountUserBToken,
    TAccountVaultProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimFeeInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountLpMint,
  TAccountLockEscrow,
  TAccountOwner,
  TAccountSourceTokens,
  TAccountEscrowVault,
  TAccountTokenProgram,
  TAccountATokenVault,
  TAccountBTokenVault,
  TAccountAVault,
  TAccountBVault,
  TAccountAVaultLp,
  TAccountBVaultLp,
  TAccountAVaultLpMint,
  TAccountBVaultLpMint,
  TAccountUserAToken,
  TAccountUserBToken,
  TAccountVaultProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    lockEscrow: { value: input.lockEscrow ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    sourceTokens: { value: input.sourceTokens ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    aTokenVault: { value: input.aTokenVault ?? null, isWritable: true },
    bTokenVault: { value: input.bTokenVault ?? null, isWritable: true },
    aVault: { value: input.aVault ?? null, isWritable: true },
    bVault: { value: input.bVault ?? null, isWritable: true },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: true },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: true },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: true },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: true },
    userAToken: { value: input.userAToken ?? null, isWritable: true },
    userBToken: { value: input.userBToken ?? null, isWritable: true },
    vaultProgram: { value: input.vaultProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.lockEscrow),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.sourceTokens),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.aTokenVault),
      getAccountMeta(accounts.bTokenVault),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
      getAccountMeta(accounts.userAToken),
      getAccountMeta(accounts.userBToken),
      getAccountMeta(accounts.vaultProgram),
    ],
    programAddress,
    data: getClaimFeeInstructionDataEncoder().encode(
      args as ClaimFeeInstructionDataArgs
    ),
  } as ClaimFeeInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountUserAToken,
    TAccountUserBToken,
    TAccountVaultProgram
  >;

  return instruction;
}

export type ParsedClaimFeeInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account */
    pool: TAccountMetas[0];
    /** LP token mint of the pool */
    lpMint: TAccountMetas[1];
    /** Lock account */
    lockEscrow: TAccountMetas[2];
    /** Owner of lock account */
    owner: TAccountMetas[3];
    /** owner lp token account */
    sourceTokens: TAccountMetas[4];
    /** Escrow vault */
    escrowVault: TAccountMetas[5];
    /** Token program. */
    tokenProgram: TAccountMetas[6];
    /** Token vault account of vault A */
    aTokenVault: TAccountMetas[7];
    /** Token vault account of vault B */
    bTokenVault: TAccountMetas[8];
    /** Vault account for token a. token a of the pool will be deposit / withdraw from this vault account. */
    aVault: TAccountMetas[9];
    /** Vault account for token b. token b of the pool will be deposit / withdraw from this vault account. */
    bVault: TAccountMetas[10];
    /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
    aVaultLp: TAccountMetas[11];
    /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
    bVaultLp: TAccountMetas[12];
    /** LP token mint of vault a */
    aVaultLpMint: TAccountMetas[13];
    /** LP token mint of vault b */
    bVaultLpMint: TAccountMetas[14];
    /** User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account. */
    userAToken: TAccountMetas[15];
    /** User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account. */
    userBToken: TAccountMetas[16];
    /** Vault program. the pool will deposit/withdraw liquidity from the vault. */
    vaultProgram: TAccountMetas[17];
  };
  data: ClaimFeeInstructionData;
};

export function parseClaimFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 18) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      lpMint: getNextAccount(),
      lockEscrow: getNextAccount(),
      owner: getNextAccount(),
      sourceTokens: getNextAccount(),
      escrowVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      aTokenVault: getNextAccount(),
      bTokenVault: getNextAccount(),
      aVault: getNextAccount(),
      bVault: getNextAccount(),
      aVaultLp: getNextAccount(),
      bVaultLp: getNextAccount(),
      aVaultLpMint: getNextAccount(),
      bVaultLpMint: getNextAccount(),
      userAToken: getNextAccount(),
      userBToken: getNextAccount(),
      vaultProgram: getNextAccount(),
    },
    data: getClaimFeeInstructionDataDecoder().decode(instruction.data),
  };
}

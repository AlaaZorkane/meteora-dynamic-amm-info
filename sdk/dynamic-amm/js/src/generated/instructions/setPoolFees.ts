/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getPoolFeesDecoder,
  getPoolFeesEncoder,
  type PoolFees,
  type PoolFeesArgs,
} from '../types';

export const SET_POOL_FEES_DISCRIMINATOR = new Uint8Array([
  102, 44, 158, 54, 205, 37, 126, 78,
]);

export function getSetPoolFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_POOL_FEES_DISCRIMINATOR
  );
}

export type SetPoolFeesInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountFeeOperator extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountFeeOperator extends string
        ? ReadonlySignerAccount<TAccountFeeOperator> &
            IAccountSignerMeta<TAccountFeeOperator>
        : TAccountFeeOperator,
      ...TRemainingAccounts,
    ]
  >;

export type SetPoolFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
  fees: PoolFees;
  newPartnerFeeNumerator: bigint;
};

export type SetPoolFeesInstructionDataArgs = {
  fees: PoolFeesArgs;
  newPartnerFeeNumerator: number | bigint;
};

export function getSetPoolFeesInstructionDataEncoder(): Encoder<SetPoolFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['fees', getPoolFeesEncoder()],
      ['newPartnerFeeNumerator', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_POOL_FEES_DISCRIMINATOR })
  );
}

export function getSetPoolFeesInstructionDataDecoder(): Decoder<SetPoolFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['fees', getPoolFeesDecoder()],
    ['newPartnerFeeNumerator', getU64Decoder()],
  ]);
}

export function getSetPoolFeesInstructionDataCodec(): Codec<
  SetPoolFeesInstructionDataArgs,
  SetPoolFeesInstructionData
> {
  return combineCodec(
    getSetPoolFeesInstructionDataEncoder(),
    getSetPoolFeesInstructionDataDecoder()
  );
}

export type SetPoolFeesInput<
  TAccountPool extends string = string,
  TAccountFeeOperator extends string = string,
> = {
  /** Pool account (PDA) */
  pool: Address<TAccountPool>;
  /** Fee operator account */
  feeOperator: TransactionSigner<TAccountFeeOperator>;
  fees: SetPoolFeesInstructionDataArgs['fees'];
  newPartnerFeeNumerator: SetPoolFeesInstructionDataArgs['newPartnerFeeNumerator'];
};

export function getSetPoolFeesInstruction<
  TAccountPool extends string,
  TAccountFeeOperator extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: SetPoolFeesInput<TAccountPool, TAccountFeeOperator>,
  config?: { programAddress?: TProgramAddress }
): SetPoolFeesInstruction<TProgramAddress, TAccountPool, TAccountFeeOperator> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    feeOperator: { value: input.feeOperator ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.feeOperator),
    ],
    programAddress,
    data: getSetPoolFeesInstructionDataEncoder().encode(
      args as SetPoolFeesInstructionDataArgs
    ),
  } as SetPoolFeesInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountFeeOperator
  >;

  return instruction;
}

export type ParsedSetPoolFeesInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account (PDA) */
    pool: TAccountMetas[0];
    /** Fee operator account */
    feeOperator: TAccountMetas[1];
  };
  data: SetPoolFeesInstructionData;
};

export function parseSetPoolFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetPoolFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      feeOperator: getNextAccount(),
    },
    data: getSetPoolFeesInstructionDataDecoder().decode(instruction.data),
  };
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const LOCK_DISCRIMINATOR = new Uint8Array([
  21, 19, 208, 43, 237, 62, 255, 87,
]);

export function getLockDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOCK_DISCRIMINATOR);
}

export type LockInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountLockEscrow extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSourceTokens extends string | IAccountMeta<string> = string,
  TAccountEscrowVault extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAVault extends string | IAccountMeta<string> = string,
  TAccountBVault extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountBVaultLp extends string | IAccountMeta<string> = string,
  TAccountAVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountBVaultLpMint extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpMint extends string
        ? ReadonlyAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountLockEscrow extends string
        ? WritableAccount<TAccountLockEscrow>
        : TAccountLockEscrow,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSourceTokens extends string
        ? WritableAccount<TAccountSourceTokens>
        : TAccountSourceTokens,
      TAccountEscrowVault extends string
        ? WritableAccount<TAccountEscrowVault>
        : TAccountEscrowVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAVault extends string
        ? ReadonlyAccount<TAccountAVault>
        : TAccountAVault,
      TAccountBVault extends string
        ? ReadonlyAccount<TAccountBVault>
        : TAccountBVault,
      TAccountAVaultLp extends string
        ? ReadonlyAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountBVaultLp extends string
        ? ReadonlyAccount<TAccountBVaultLp>
        : TAccountBVaultLp,
      TAccountAVaultLpMint extends string
        ? ReadonlyAccount<TAccountAVaultLpMint>
        : TAccountAVaultLpMint,
      TAccountBVaultLpMint extends string
        ? ReadonlyAccount<TAccountBVaultLpMint>
        : TAccountBVaultLpMint,
      ...TRemainingAccounts,
    ]
  >;

export type LockInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAmount: bigint;
};

export type LockInstructionDataArgs = { maxAmount: number | bigint };

export function getLockInstructionDataEncoder(): Encoder<LockInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCK_DISCRIMINATOR })
  );
}

export function getLockInstructionDataDecoder(): Decoder<LockInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAmount', getU64Decoder()],
  ]);
}

export function getLockInstructionDataCodec(): Codec<
  LockInstructionDataArgs,
  LockInstructionData
> {
  return combineCodec(
    getLockInstructionDataEncoder(),
    getLockInstructionDataDecoder()
  );
}

export type LockInput<
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountLockEscrow extends string = string,
  TAccountOwner extends string = string,
  TAccountSourceTokens extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
> = {
  /** Pool account */
  pool: Address<TAccountPool>;
  /** LP token mint of the pool */
  lpMint: Address<TAccountLpMint>;
  /** Lock account */
  lockEscrow: Address<TAccountLockEscrow>;
  /** Can be anyone */
  owner: TransactionSigner<TAccountOwner>;
  /** owner lp token account */
  sourceTokens: Address<TAccountSourceTokens>;
  /** Escrow vault */
  escrowVault: Address<TAccountEscrowVault>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Vault account for token a. token a of the pool will be deposit / withdraw from this vault account. */
  aVault: Address<TAccountAVault>;
  /** Vault account for token b. token b of the pool will be deposit / withdraw from this vault account. */
  bVault: Address<TAccountBVault>;
  /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  aVaultLp: Address<TAccountAVaultLp>;
  /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  bVaultLp: Address<TAccountBVaultLp>;
  /** LP token mint of vault a */
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  /** LP token mint of vault b */
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  maxAmount: LockInstructionDataArgs['maxAmount'];
};

export function getLockInstruction<
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountLockEscrow extends string,
  TAccountOwner extends string,
  TAccountSourceTokens extends string,
  TAccountEscrowVault extends string,
  TAccountTokenProgram extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: LockInput<
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint
  >,
  config?: { programAddress?: TProgramAddress }
): LockInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountLpMint,
  TAccountLockEscrow,
  TAccountOwner,
  TAccountSourceTokens,
  TAccountEscrowVault,
  TAccountTokenProgram,
  TAccountAVault,
  TAccountBVault,
  TAccountAVaultLp,
  TAccountBVaultLp,
  TAccountAVaultLpMint,
  TAccountBVaultLpMint
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: false },
    lockEscrow: { value: input.lockEscrow ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    sourceTokens: { value: input.sourceTokens ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    aVault: { value: input.aVault ?? null, isWritable: false },
    bVault: { value: input.bVault ?? null, isWritable: false },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: false },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: false },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: false },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.lockEscrow),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.sourceTokens),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
    ],
    programAddress,
    data: getLockInstructionDataEncoder().encode(
      args as LockInstructionDataArgs
    ),
  } as LockInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountLpMint,
    TAccountLockEscrow,
    TAccountOwner,
    TAccountSourceTokens,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAVault,
    TAccountBVault,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint
  >;

  return instruction;
}

export type ParsedLockInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account */
    pool: TAccountMetas[0];
    /** LP token mint of the pool */
    lpMint: TAccountMetas[1];
    /** Lock account */
    lockEscrow: TAccountMetas[2];
    /** Can be anyone */
    owner: TAccountMetas[3];
    /** owner lp token account */
    sourceTokens: TAccountMetas[4];
    /** Escrow vault */
    escrowVault: TAccountMetas[5];
    /** Token program. */
    tokenProgram: TAccountMetas[6];
    /** Vault account for token a. token a of the pool will be deposit / withdraw from this vault account. */
    aVault: TAccountMetas[7];
    /** Vault account for token b. token b of the pool will be deposit / withdraw from this vault account. */
    bVault: TAccountMetas[8];
    /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
    aVaultLp: TAccountMetas[9];
    /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
    bVaultLp: TAccountMetas[10];
    /** LP token mint of vault a */
    aVaultLpMint: TAccountMetas[11];
    /** LP token mint of vault b */
    bVaultLpMint: TAccountMetas[12];
  };
  data: LockInstructionData;
};

export function parseLockInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLockInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      lpMint: getNextAccount(),
      lockEscrow: getNextAccount(),
      owner: getNextAccount(),
      sourceTokens: getNextAccount(),
      escrowVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      aVault: getNextAccount(),
      bVault: getNextAccount(),
      aVaultLp: getNextAccount(),
      bVaultLp: getNextAccount(),
      aVaultLpMint: getNextAccount(),
      bVaultLpMint: getNextAccount(),
    },
    data: getLockInstructionDataDecoder().decode(instruction.data),
  };
}

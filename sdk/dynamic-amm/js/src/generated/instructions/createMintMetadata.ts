/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_MINT_METADATA_DISCRIMINATOR = new Uint8Array([
  13, 70, 168, 41, 250, 100, 148, 90,
]);

export function getCreateMintMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_MINT_METADATA_DISCRIMINATOR
  );
}

export type CreateMintMetadataInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountMintMetadata extends string | IAccountMeta<string> = string,
  TAccountMetadataProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountLpMint extends string
        ? ReadonlyAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountAVaultLp extends string
        ? ReadonlyAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountMintMetadata extends string
        ? WritableAccount<TAccountMintMetadata>
        : TAccountMintMetadata,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export type CreateMintMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CreateMintMetadataInstructionDataArgs = {};

export function getCreateMintMetadataInstructionDataEncoder(): Encoder<CreateMintMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CREATE_MINT_METADATA_DISCRIMINATOR })
  );
}

export function getCreateMintMetadataInstructionDataDecoder(): Decoder<CreateMintMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreateMintMetadataInstructionDataCodec(): Codec<
  CreateMintMetadataInstructionDataArgs,
  CreateMintMetadataInstructionData
> {
  return combineCodec(
    getCreateMintMetadataInstructionDataEncoder(),
    getCreateMintMetadataInstructionDataDecoder()
  );
}

export type CreateMintMetadataInput<
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountMintMetadata extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
> = {
  /** Pool account */
  pool: Address<TAccountPool>;
  /** LP mint account of the pool */
  lpMint: Address<TAccountLpMint>;
  /** Vault A LP account of the pool */
  aVaultLp: Address<TAccountAVaultLp>;
  mintMetadata: Address<TAccountMintMetadata>;
  metadataProgram: Address<TAccountMetadataProgram>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Payer */
  payer: TransactionSigner<TAccountPayer>;
};

export function getCreateMintMetadataInstruction<
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountAVaultLp extends string,
  TAccountMintMetadata extends string,
  TAccountMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateMintMetadataInput<
    TAccountPool,
    TAccountLpMint,
    TAccountAVaultLp,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountSystemProgram,
    TAccountPayer
  >,
  config?: { programAddress?: TProgramAddress }
): CreateMintMetadataInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountLpMint,
  TAccountAVaultLp,
  TAccountMintMetadata,
  TAccountMetadataProgram,
  TAccountSystemProgram,
  TAccountPayer
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: false },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: false },
    mintMetadata: { value: input.mintMetadata ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.mintMetadata),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
    ],
    programAddress,
    data: getCreateMintMetadataInstructionDataEncoder().encode({}),
  } as CreateMintMetadataInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountLpMint,
    TAccountAVaultLp,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountSystemProgram,
    TAccountPayer
  >;

  return instruction;
}

export type ParsedCreateMintMetadataInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account */
    pool: TAccountMetas[0];
    /** LP mint account of the pool */
    lpMint: TAccountMetas[1];
    /** Vault A LP account of the pool */
    aVaultLp: TAccountMetas[2];
    mintMetadata: TAccountMetas[3];
    metadataProgram: TAccountMetas[4];
    /** System program. */
    systemProgram: TAccountMetas[5];
    /** Payer */
    payer: TAccountMetas[6];
  };
  data: CreateMintMetadataInstructionData;
};

export function parseCreateMintMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateMintMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      lpMint: getNextAccount(),
      aVaultLp: getNextAccount(),
      mintMetadata: getNextAccount(),
      metadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      payer: getNextAccount(),
    },
    data: getCreateMintMetadataInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

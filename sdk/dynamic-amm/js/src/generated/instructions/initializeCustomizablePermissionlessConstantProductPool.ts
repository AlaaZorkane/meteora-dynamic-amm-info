/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_CONSTANT_PRODUCT_POOL_DISCRIMINATOR =
  new Uint8Array([145, 24, 172, 194, 219, 125, 3, 190]);

export function getInitializeCustomizablePermissionlessConstantProductPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_CONSTANT_PRODUCT_POOL_DISCRIMINATOR
  );
}

export type InitializeCustomizablePermissionlessConstantProductPoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountTokenAMint extends string | IAccountMeta<string> = string,
  TAccountTokenBMint extends string | IAccountMeta<string> = string,
  TAccountAVault extends string | IAccountMeta<string> = string,
  TAccountBVault extends string | IAccountMeta<string> = string,
  TAccountATokenVault extends string | IAccountMeta<string> = string,
  TAccountBTokenVault extends string | IAccountMeta<string> = string,
  TAccountAVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountBVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountBVaultLp extends string | IAccountMeta<string> = string,
  TAccountPayerTokenA extends string | IAccountMeta<string> = string,
  TAccountPayerTokenB extends string | IAccountMeta<string> = string,
  TAccountPayerPoolLp extends string | IAccountMeta<string> = string,
  TAccountProtocolTokenAFee extends string | IAccountMeta<string> = string,
  TAccountProtocolTokenBFee extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountMintMetadata extends string | IAccountMeta<string> = string,
  TAccountMetadataProgram extends string | IAccountMeta<string> = string,
  TAccountVaultProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountTokenAMint extends string
        ? ReadonlyAccount<TAccountTokenAMint>
        : TAccountTokenAMint,
      TAccountTokenBMint extends string
        ? ReadonlyAccount<TAccountTokenBMint>
        : TAccountTokenBMint,
      TAccountAVault extends string
        ? WritableAccount<TAccountAVault>
        : TAccountAVault,
      TAccountBVault extends string
        ? WritableAccount<TAccountBVault>
        : TAccountBVault,
      TAccountATokenVault extends string
        ? WritableAccount<TAccountATokenVault>
        : TAccountATokenVault,
      TAccountBTokenVault extends string
        ? WritableAccount<TAccountBTokenVault>
        : TAccountBTokenVault,
      TAccountAVaultLpMint extends string
        ? WritableAccount<TAccountAVaultLpMint>
        : TAccountAVaultLpMint,
      TAccountBVaultLpMint extends string
        ? WritableAccount<TAccountBVaultLpMint>
        : TAccountBVaultLpMint,
      TAccountAVaultLp extends string
        ? WritableAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountBVaultLp extends string
        ? WritableAccount<TAccountBVaultLp>
        : TAccountBVaultLp,
      TAccountPayerTokenA extends string
        ? WritableAccount<TAccountPayerTokenA>
        : TAccountPayerTokenA,
      TAccountPayerTokenB extends string
        ? WritableAccount<TAccountPayerTokenB>
        : TAccountPayerTokenB,
      TAccountPayerPoolLp extends string
        ? WritableAccount<TAccountPayerPoolLp>
        : TAccountPayerPoolLp,
      TAccountProtocolTokenAFee extends string
        ? WritableAccount<TAccountProtocolTokenAFee>
        : TAccountProtocolTokenAFee,
      TAccountProtocolTokenBFee extends string
        ? WritableAccount<TAccountProtocolTokenBFee>
        : TAccountProtocolTokenBFee,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountMintMetadata extends string
        ? WritableAccount<TAccountMintMetadata>
        : TAccountMintMetadata,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountVaultProgram extends string
        ? ReadonlyAccount<TAccountVaultProgram>
        : TAccountVaultProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCustomizablePermissionlessConstantProductPoolInstructionData =
  {
    discriminator: ReadonlyUint8Array;
    tokenAAmount: bigint;
    tokenBAmount: bigint;
    /** Trading fee. */
    tradeFeeNumerator: number;
    /** The pool start trading. */
    activationPoint: Option<bigint>;
    /** Whether the pool support alpha vault */
    hasAlphaVault: boolean;
    /** Activation type */
    activationType: number;
    /** Padding */
    padding: ReadonlyUint8Array;
  };

export type InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs =
  {
    tokenAAmount: number | bigint;
    tokenBAmount: number | bigint;
    /** Trading fee. */
    tradeFeeNumerator: number;
    /** The pool start trading. */
    activationPoint: OptionOrNullable<number | bigint>;
    /** Whether the pool support alpha vault */
    hasAlphaVault: boolean;
    /** Activation type */
    activationType: number;
    /** Padding */
    padding: ReadonlyUint8Array;
  };

export function getInitializeCustomizablePermissionlessConstantProductPoolInstructionDataEncoder(): Encoder<InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tokenAAmount', getU64Encoder()],
      ['tokenBAmount', getU64Encoder()],
      ['tradeFeeNumerator', getU32Encoder()],
      ['activationPoint', getOptionEncoder(getU64Encoder())],
      ['hasAlphaVault', getBooleanEncoder()],
      ['activationType', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 90)],
    ]),
    (value) => ({
      ...value,
      discriminator:
        INITIALIZE_CUSTOMIZABLE_PERMISSIONLESS_CONSTANT_PRODUCT_POOL_DISCRIMINATOR,
    })
  );
}

export function getInitializeCustomizablePermissionlessConstantProductPoolInstructionDataDecoder(): Decoder<InitializeCustomizablePermissionlessConstantProductPoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tokenAAmount', getU64Decoder()],
    ['tokenBAmount', getU64Decoder()],
    ['tradeFeeNumerator', getU32Decoder()],
    ['activationPoint', getOptionDecoder(getU64Decoder())],
    ['hasAlphaVault', getBooleanDecoder()],
    ['activationType', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 90)],
  ]);
}

export function getInitializeCustomizablePermissionlessConstantProductPoolInstructionDataCodec(): Codec<
  InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs,
  InitializeCustomizablePermissionlessConstantProductPoolInstructionData
> {
  return combineCodec(
    getInitializeCustomizablePermissionlessConstantProductPoolInstructionDataEncoder(),
    getInitializeCustomizablePermissionlessConstantProductPoolInstructionDataDecoder()
  );
}

export type InitializeCustomizablePermissionlessConstantProductPoolInput<
  TAccountPool extends string = string,
  TAccountLpMint extends string = string,
  TAccountTokenAMint extends string = string,
  TAccountTokenBMint extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountATokenVault extends string = string,
  TAccountBTokenVault extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountPayerTokenA extends string = string,
  TAccountPayerTokenB extends string = string,
  TAccountPayerPoolLp extends string = string,
  TAccountProtocolTokenAFee extends string = string,
  TAccountProtocolTokenBFee extends string = string,
  TAccountPayer extends string = string,
  TAccountRent extends string = string,
  TAccountMintMetadata extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountVaultProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Pool account (PDA address) */
  pool: Address<TAccountPool>;
  /** LP token mint of the pool */
  lpMint: Address<TAccountLpMint>;
  /** Token A mint of the pool. Eg: USDT */
  tokenAMint: Address<TAccountTokenAMint>;
  /** Token B mint of the pool. Eg: USDC */
  tokenBMint: Address<TAccountTokenBMint>;
  /** Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account. */
  aVault: Address<TAccountAVault>;
  /** Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account. */
  bVault: Address<TAccountBVault>;
  /** Token vault account of vault A */
  aTokenVault: Address<TAccountATokenVault>;
  /** Token vault account of vault B */
  bTokenVault: Address<TAccountBTokenVault>;
  /** LP token mint of vault A */
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  /** LP token mint of vault B */
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  aVaultLp: Address<TAccountAVaultLp>;
  /** LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault. */
  bVaultLp: Address<TAccountBVaultLp>;
  /** Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity. */
  payerTokenA: Address<TAccountPayerTokenA>;
  /** Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity. */
  payerTokenB: Address<TAccountPayerTokenB>;
  payerPoolLp: Address<TAccountPayerPoolLp>;
  /** Protocol fee token account for token A. Used to receive trading fee. */
  protocolTokenAFee: Address<TAccountProtocolTokenAFee>;
  /** Protocol fee token account for token B. Used to receive trading fee. */
  protocolTokenBFee: Address<TAccountProtocolTokenBFee>;
  /** Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool. */
  payer: TransactionSigner<TAccountPayer>;
  /** Rent account. */
  rent?: Address<TAccountRent>;
  mintMetadata: Address<TAccountMintMetadata>;
  metadataProgram: Address<TAccountMetadataProgram>;
  /** Vault program. The pool will deposit/withdraw liquidity from the vault. */
  vaultProgram: Address<TAccountVaultProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Associated token program. */
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
  tokenAAmount: InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs['tokenAAmount'];
  tokenBAmount: InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs['tokenBAmount'];
  tradeFeeNumerator: InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs['tradeFeeNumerator'];
  activationPoint: InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs['activationPoint'];
  hasAlphaVault: InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs['hasAlphaVault'];
  activationType: InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs['activationType'];
  padding: InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs['padding'];
};

export function getInitializeCustomizablePermissionlessConstantProductPoolInstruction<
  TAccountPool extends string,
  TAccountLpMint extends string,
  TAccountTokenAMint extends string,
  TAccountTokenBMint extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountATokenVault extends string,
  TAccountBTokenVault extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountPayerTokenA extends string,
  TAccountPayerTokenB extends string,
  TAccountPayerPoolLp extends string,
  TAccountProtocolTokenAFee extends string,
  TAccountProtocolTokenBFee extends string,
  TAccountPayer extends string,
  TAccountRent extends string,
  TAccountMintMetadata extends string,
  TAccountMetadataProgram extends string,
  TAccountVaultProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: InitializeCustomizablePermissionlessConstantProductPoolInput<
    TAccountPool,
    TAccountLpMint,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountPayerTokenA,
    TAccountPayerTokenB,
    TAccountPayerPoolLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountPayer,
    TAccountRent,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountVaultProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCustomizablePermissionlessConstantProductPoolInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountLpMint,
  TAccountTokenAMint,
  TAccountTokenBMint,
  TAccountAVault,
  TAccountBVault,
  TAccountATokenVault,
  TAccountBTokenVault,
  TAccountAVaultLpMint,
  TAccountBVaultLpMint,
  TAccountAVaultLp,
  TAccountBVaultLp,
  TAccountPayerTokenA,
  TAccountPayerTokenB,
  TAccountPayerPoolLp,
  TAccountProtocolTokenAFee,
  TAccountProtocolTokenBFee,
  TAccountPayer,
  TAccountRent,
  TAccountMintMetadata,
  TAccountMetadataProgram,
  TAccountVaultProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    tokenAMint: { value: input.tokenAMint ?? null, isWritable: false },
    tokenBMint: { value: input.tokenBMint ?? null, isWritable: false },
    aVault: { value: input.aVault ?? null, isWritable: true },
    bVault: { value: input.bVault ?? null, isWritable: true },
    aTokenVault: { value: input.aTokenVault ?? null, isWritable: true },
    bTokenVault: { value: input.bTokenVault ?? null, isWritable: true },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: true },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: true },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: true },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: true },
    payerTokenA: { value: input.payerTokenA ?? null, isWritable: true },
    payerTokenB: { value: input.payerTokenB ?? null, isWritable: true },
    payerPoolLp: { value: input.payerPoolLp ?? null, isWritable: true },
    protocolTokenAFee: {
      value: input.protocolTokenAFee ?? null,
      isWritable: true,
    },
    protocolTokenBFee: {
      value: input.protocolTokenBFee ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    mintMetadata: { value: input.mintMetadata ?? null, isWritable: true },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    vaultProgram: { value: input.vaultProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.tokenAMint),
      getAccountMeta(accounts.tokenBMint),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aTokenVault),
      getAccountMeta(accounts.bTokenVault),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.payerTokenA),
      getAccountMeta(accounts.payerTokenB),
      getAccountMeta(accounts.payerPoolLp),
      getAccountMeta(accounts.protocolTokenAFee),
      getAccountMeta(accounts.protocolTokenBFee),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.mintMetadata),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.vaultProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeCustomizablePermissionlessConstantProductPoolInstructionDataEncoder().encode(
      args as InitializeCustomizablePermissionlessConstantProductPoolInstructionDataArgs
    ),
  } as InitializeCustomizablePermissionlessConstantProductPoolInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountLpMint,
    TAccountTokenAMint,
    TAccountTokenBMint,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountPayerTokenA,
    TAccountPayerTokenB,
    TAccountPayerPoolLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountPayer,
    TAccountRent,
    TAccountMintMetadata,
    TAccountMetadataProgram,
    TAccountVaultProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeCustomizablePermissionlessConstantProductPoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account (PDA address) */
    pool: TAccountMetas[0];
    /** LP token mint of the pool */
    lpMint: TAccountMetas[1];
    /** Token A mint of the pool. Eg: USDT */
    tokenAMint: TAccountMetas[2];
    /** Token B mint of the pool. Eg: USDC */
    tokenBMint: TAccountMetas[3];
    /** Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account. */
    aVault: TAccountMetas[4];
    /** Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account. */
    bVault: TAccountMetas[5];
    /** Token vault account of vault A */
    aTokenVault: TAccountMetas[6];
    /** Token vault account of vault B */
    bTokenVault: TAccountMetas[7];
    /** LP token mint of vault A */
    aVaultLpMint: TAccountMetas[8];
    /** LP token mint of vault B */
    bVaultLpMint: TAccountMetas[9];
    /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
    aVaultLp: TAccountMetas[10];
    /** LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault. */
    bVaultLp: TAccountMetas[11];
    /** Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity. */
    payerTokenA: TAccountMetas[12];
    /** Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity. */
    payerTokenB: TAccountMetas[13];
    payerPoolLp: TAccountMetas[14];
    /** Protocol fee token account for token A. Used to receive trading fee. */
    protocolTokenAFee: TAccountMetas[15];
    /** Protocol fee token account for token B. Used to receive trading fee. */
    protocolTokenBFee: TAccountMetas[16];
    /** Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool. */
    payer: TAccountMetas[17];
    /** Rent account. */
    rent: TAccountMetas[18];
    mintMetadata: TAccountMetas[19];
    metadataProgram: TAccountMetas[20];
    /** Vault program. The pool will deposit/withdraw liquidity from the vault. */
    vaultProgram: TAccountMetas[21];
    /** Token program. */
    tokenProgram: TAccountMetas[22];
    /** Associated token program. */
    associatedTokenProgram: TAccountMetas[23];
    /** System program. */
    systemProgram: TAccountMetas[24];
  };
  data: InitializeCustomizablePermissionlessConstantProductPoolInstructionData;
};

export function parseInitializeCustomizablePermissionlessConstantProductPoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeCustomizablePermissionlessConstantProductPoolInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 25) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      lpMint: getNextAccount(),
      tokenAMint: getNextAccount(),
      tokenBMint: getNextAccount(),
      aVault: getNextAccount(),
      bVault: getNextAccount(),
      aTokenVault: getNextAccount(),
      bTokenVault: getNextAccount(),
      aVaultLpMint: getNextAccount(),
      bVaultLpMint: getNextAccount(),
      aVaultLp: getNextAccount(),
      bVaultLp: getNextAccount(),
      payerTokenA: getNextAccount(),
      payerTokenB: getNextAccount(),
      payerPoolLp: getNextAccount(),
      protocolTokenAFee: getNextAccount(),
      protocolTokenBFee: getNextAccount(),
      payer: getNextAccount(),
      rent: getNextAccount(),
      mintMetadata: getNextAccount(),
      metadataProgram: getNextAccount(),
      vaultProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeCustomizablePermissionlessConstantProductPoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_CONFIG_DISCRIMINATOR = new Uint8Array([
  145, 9, 72, 157, 95, 125, 61, 85,
]);

export function getCloseConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_CONFIG_DISCRIMINATOR
  );
}

export type CloseConfigInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountRentReceiver extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountRentReceiver extends string
        ? WritableAccount<TAccountRentReceiver>
        : TAccountRentReceiver,
      ...TRemainingAccounts,
    ]
  >;

export type CloseConfigInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseConfigInstructionDataArgs = {};

export function getCloseConfigInstructionDataEncoder(): Encoder<CloseConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_CONFIG_DISCRIMINATOR })
  );
}

export function getCloseConfigInstructionDataDecoder(): Decoder<CloseConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseConfigInstructionDataCodec(): Codec<
  CloseConfigInstructionDataArgs,
  CloseConfigInstructionData
> {
  return combineCodec(
    getCloseConfigInstructionDataEncoder(),
    getCloseConfigInstructionDataDecoder()
  );
}

export type CloseConfigInput<
  TAccountConfig extends string = string,
  TAccountAdmin extends string = string,
  TAccountRentReceiver extends string = string,
> = {
  config: Address<TAccountConfig>;
  admin: TransactionSigner<TAccountAdmin>;
  rentReceiver: Address<TAccountRentReceiver>;
};

export function getCloseConfigInstruction<
  TAccountConfig extends string,
  TAccountAdmin extends string,
  TAccountRentReceiver extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CloseConfigInput<TAccountConfig, TAccountAdmin, TAccountRentReceiver>,
  config?: { programAddress?: TProgramAddress }
): CloseConfigInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountAdmin,
  TAccountRentReceiver
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    rentReceiver: { value: input.rentReceiver ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.rentReceiver),
    ],
    programAddress,
    data: getCloseConfigInstructionDataEncoder().encode({}),
  } as CloseConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountAdmin,
    TAccountRentReceiver
  >;

  return instruction;
}

export type ParsedCloseConfigInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    admin: TAccountMetas[1];
    rentReceiver: TAccountMetas[2];
  };
  data: CloseConfigInstructionData;
};

export function parseCloseConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      admin: getNextAccount(),
      rentReceiver: getNextAccount(),
    },
    data: getCloseConfigInstructionDataDecoder().decode(instruction.data),
  };
}

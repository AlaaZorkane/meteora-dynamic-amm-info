/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  201, 207, 243, 114, 75, 111, 47, 189,
]);

export function getCreateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CONFIG_DISCRIMINATOR
  );
}

export type CreateConfigInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  tradeFeeNumerator: bigint;
  protocolTradeFeeNumerator: bigint;
  activationDuration: bigint;
  vaultConfigKey: Address;
  poolCreatorAuthority: Address;
  activationType: number;
  index: bigint;
  partnerFeeNumerator: bigint;
};

export type CreateConfigInstructionDataArgs = {
  tradeFeeNumerator: number | bigint;
  protocolTradeFeeNumerator: number | bigint;
  activationDuration: number | bigint;
  vaultConfigKey: Address;
  poolCreatorAuthority: Address;
  activationType: number;
  index: number | bigint;
  partnerFeeNumerator: number | bigint;
};

export function getCreateConfigInstructionDataEncoder(): Encoder<CreateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tradeFeeNumerator', getU64Encoder()],
      ['protocolTradeFeeNumerator', getU64Encoder()],
      ['activationDuration', getU64Encoder()],
      ['vaultConfigKey', getAddressEncoder()],
      ['poolCreatorAuthority', getAddressEncoder()],
      ['activationType', getU8Encoder()],
      ['index', getU64Encoder()],
      ['partnerFeeNumerator', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CONFIG_DISCRIMINATOR })
  );
}

export function getCreateConfigInstructionDataDecoder(): Decoder<CreateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tradeFeeNumerator', getU64Decoder()],
    ['protocolTradeFeeNumerator', getU64Decoder()],
    ['activationDuration', getU64Decoder()],
    ['vaultConfigKey', getAddressDecoder()],
    ['poolCreatorAuthority', getAddressDecoder()],
    ['activationType', getU8Decoder()],
    ['index', getU64Decoder()],
    ['partnerFeeNumerator', getU64Decoder()],
  ]);
}

export function getCreateConfigInstructionDataCodec(): Codec<
  CreateConfigInstructionDataArgs,
  CreateConfigInstructionData
> {
  return combineCodec(
    getCreateConfigInstructionDataEncoder(),
    getCreateConfigInstructionDataDecoder()
  );
}

export type CreateConfigInput<
  TAccountConfig extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  admin: TransactionSigner<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
  tradeFeeNumerator: CreateConfigInstructionDataArgs['tradeFeeNumerator'];
  protocolTradeFeeNumerator: CreateConfigInstructionDataArgs['protocolTradeFeeNumerator'];
  activationDuration: CreateConfigInstructionDataArgs['activationDuration'];
  vaultConfigKey: CreateConfigInstructionDataArgs['vaultConfigKey'];
  poolCreatorAuthority: CreateConfigInstructionDataArgs['poolCreatorAuthority'];
  activationType: CreateConfigInstructionDataArgs['activationType'];
  index: CreateConfigInstructionDataArgs['index'];
  partnerFeeNumerator: CreateConfigInstructionDataArgs['partnerFeeNumerator'];
};

export function getCreateConfigInstruction<
  TAccountConfig extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: CreateConfigInput<
    TAccountConfig,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateConfigInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountAdmin,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateConfigInstructionDataEncoder().encode(
      args as CreateConfigInstructionDataArgs
    ),
  } as CreateConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateConfigInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    admin: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateConfigInstructionData;
};

export function parseCreateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateConfigInstructionDataDecoder().decode(instruction.data),
  };
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SWAP_DISCRIMINATOR = new Uint8Array([
  248, 198, 158, 145, 225, 117, 135, 200,
]);

export function getSwapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountUserSourceToken extends string | IAccountMeta<string> = string,
  TAccountUserDestinationToken extends string | IAccountMeta<string> = string,
  TAccountAVault extends string | IAccountMeta<string> = string,
  TAccountBVault extends string | IAccountMeta<string> = string,
  TAccountATokenVault extends string | IAccountMeta<string> = string,
  TAccountBTokenVault extends string | IAccountMeta<string> = string,
  TAccountAVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountBVaultLpMint extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountBVaultLp extends string | IAccountMeta<string> = string,
  TAccountProtocolTokenFee extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountVaultProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountUserSourceToken extends string
        ? WritableAccount<TAccountUserSourceToken>
        : TAccountUserSourceToken,
      TAccountUserDestinationToken extends string
        ? WritableAccount<TAccountUserDestinationToken>
        : TAccountUserDestinationToken,
      TAccountAVault extends string
        ? WritableAccount<TAccountAVault>
        : TAccountAVault,
      TAccountBVault extends string
        ? WritableAccount<TAccountBVault>
        : TAccountBVault,
      TAccountATokenVault extends string
        ? WritableAccount<TAccountATokenVault>
        : TAccountATokenVault,
      TAccountBTokenVault extends string
        ? WritableAccount<TAccountBTokenVault>
        : TAccountBTokenVault,
      TAccountAVaultLpMint extends string
        ? WritableAccount<TAccountAVaultLpMint>
        : TAccountAVaultLpMint,
      TAccountBVaultLpMint extends string
        ? WritableAccount<TAccountBVaultLpMint>
        : TAccountBVaultLpMint,
      TAccountAVaultLp extends string
        ? WritableAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountBVaultLp extends string
        ? WritableAccount<TAccountBVaultLp>
        : TAccountBVaultLp,
      TAccountProtocolTokenFee extends string
        ? WritableAccount<TAccountProtocolTokenFee>
        : TAccountProtocolTokenFee,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountVaultProgram extends string
        ? ReadonlyAccount<TAccountVaultProgram>
        : TAccountVaultProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = {
  discriminator: ReadonlyUint8Array;
  inAmount: bigint;
  minimumOutAmount: bigint;
};

export type SwapInstructionDataArgs = {
  inAmount: number | bigint;
  minimumOutAmount: number | bigint;
};

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['inAmount', getU64Encoder()],
      ['minimumOutAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['inAmount', getU64Decoder()],
    ['minimumOutAmount', getU64Decoder()],
  ]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapInput<
  TAccountPool extends string = string,
  TAccountUserSourceToken extends string = string,
  TAccountUserDestinationToken extends string = string,
  TAccountAVault extends string = string,
  TAccountBVault extends string = string,
  TAccountATokenVault extends string = string,
  TAccountBTokenVault extends string = string,
  TAccountAVaultLpMint extends string = string,
  TAccountBVaultLpMint extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountBVaultLp extends string = string,
  TAccountProtocolTokenFee extends string = string,
  TAccountUser extends string = string,
  TAccountVaultProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Pool account (PDA) */
  pool: Address<TAccountPool>;
  /** User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool. */
  userSourceToken: Address<TAccountUserSourceToken>;
  /** User token account. The exchanged token will be transfer into this account from the pool. */
  userDestinationToken: Address<TAccountUserDestinationToken>;
  /** Vault account for token a. token a of the pool will be deposit / withdraw from this vault account. */
  aVault: Address<TAccountAVault>;
  /** Vault account for token b. token b of the pool will be deposit / withdraw from this vault account. */
  bVault: Address<TAccountBVault>;
  /** Token vault account of vault A */
  aTokenVault: Address<TAccountATokenVault>;
  /** Token vault account of vault B */
  bTokenVault: Address<TAccountBTokenVault>;
  /** Lp token mint of vault a */
  aVaultLpMint: Address<TAccountAVaultLpMint>;
  /** Lp token mint of vault b */
  bVaultLpMint: Address<TAccountBVaultLpMint>;
  /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  aVaultLp: Address<TAccountAVaultLp>;
  /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  bVaultLp: Address<TAccountBVaultLp>;
  /** Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field. */
  protocolTokenFee: Address<TAccountProtocolTokenFee>;
  /** User account. Must be owner of user_source_token. */
  user: TransactionSigner<TAccountUser>;
  /** Vault program. the pool will deposit/withdraw liquidity from the vault. */
  vaultProgram: Address<TAccountVaultProgram>;
  /** Token program. */
  tokenProgram?: Address<TAccountTokenProgram>;
  inAmount: SwapInstructionDataArgs['inAmount'];
  minimumOutAmount: SwapInstructionDataArgs['minimumOutAmount'];
};

export function getSwapInstruction<
  TAccountPool extends string,
  TAccountUserSourceToken extends string,
  TAccountUserDestinationToken extends string,
  TAccountAVault extends string,
  TAccountBVault extends string,
  TAccountATokenVault extends string,
  TAccountBTokenVault extends string,
  TAccountAVaultLpMint extends string,
  TAccountBVaultLpMint extends string,
  TAccountAVaultLp extends string,
  TAccountBVaultLp extends string,
  TAccountProtocolTokenFee extends string,
  TAccountUser extends string,
  TAccountVaultProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountPool,
    TAccountUserSourceToken,
    TAccountUserDestinationToken,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountProtocolTokenFee,
    TAccountUser,
    TAccountVaultProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountUserSourceToken,
  TAccountUserDestinationToken,
  TAccountAVault,
  TAccountBVault,
  TAccountATokenVault,
  TAccountBTokenVault,
  TAccountAVaultLpMint,
  TAccountBVaultLpMint,
  TAccountAVaultLp,
  TAccountBVaultLp,
  TAccountProtocolTokenFee,
  TAccountUser,
  TAccountVaultProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    userSourceToken: { value: input.userSourceToken ?? null, isWritable: true },
    userDestinationToken: {
      value: input.userDestinationToken ?? null,
      isWritable: true,
    },
    aVault: { value: input.aVault ?? null, isWritable: true },
    bVault: { value: input.bVault ?? null, isWritable: true },
    aTokenVault: { value: input.aTokenVault ?? null, isWritable: true },
    bTokenVault: { value: input.bTokenVault ?? null, isWritable: true },
    aVaultLpMint: { value: input.aVaultLpMint ?? null, isWritable: true },
    bVaultLpMint: { value: input.bVaultLpMint ?? null, isWritable: true },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: true },
    bVaultLp: { value: input.bVaultLp ?? null, isWritable: true },
    protocolTokenFee: {
      value: input.protocolTokenFee ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: false },
    vaultProgram: { value: input.vaultProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.userSourceToken),
      getAccountMeta(accounts.userDestinationToken),
      getAccountMeta(accounts.aVault),
      getAccountMeta(accounts.bVault),
      getAccountMeta(accounts.aTokenVault),
      getAccountMeta(accounts.bTokenVault),
      getAccountMeta(accounts.aVaultLpMint),
      getAccountMeta(accounts.bVaultLpMint),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.bVaultLp),
      getAccountMeta(accounts.protocolTokenFee),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.vaultProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountUserSourceToken,
    TAccountUserDestinationToken,
    TAccountAVault,
    TAccountBVault,
    TAccountATokenVault,
    TAccountBTokenVault,
    TAccountAVaultLpMint,
    TAccountBVaultLpMint,
    TAccountAVaultLp,
    TAccountBVaultLp,
    TAccountProtocolTokenFee,
    TAccountUser,
    TAccountVaultProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account (PDA) */
    pool: TAccountMetas[0];
    /** User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool. */
    userSourceToken: TAccountMetas[1];
    /** User token account. The exchanged token will be transfer into this account from the pool. */
    userDestinationToken: TAccountMetas[2];
    /** Vault account for token a. token a of the pool will be deposit / withdraw from this vault account. */
    aVault: TAccountMetas[3];
    /** Vault account for token b. token b of the pool will be deposit / withdraw from this vault account. */
    bVault: TAccountMetas[4];
    /** Token vault account of vault A */
    aTokenVault: TAccountMetas[5];
    /** Token vault account of vault B */
    bTokenVault: TAccountMetas[6];
    /** Lp token mint of vault a */
    aVaultLpMint: TAccountMetas[7];
    /** Lp token mint of vault b */
    bVaultLpMint: TAccountMetas[8];
    /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
    aVaultLp: TAccountMetas[9];
    /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
    bVaultLp: TAccountMetas[10];
    /** Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field. */
    protocolTokenFee: TAccountMetas[11];
    /** User account. Must be owner of user_source_token. */
    user: TAccountMetas[12];
    /** Vault program. the pool will deposit/withdraw liquidity from the vault. */
    vaultProgram: TAccountMetas[13];
    /** Token program. */
    tokenProgram: TAccountMetas[14];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      userSourceToken: getNextAccount(),
      userDestinationToken: getNextAccount(),
      aVault: getNextAccount(),
      bVault: getNextAccount(),
      aTokenVault: getNextAccount(),
      bTokenVault: getNextAccount(),
      aVaultLpMint: getNextAccount(),
      bVaultLpMint: getNextAccount(),
      aVaultLp: getNextAccount(),
      bVaultLp: getNextAccount(),
      protocolTokenFee: getNextAccount(),
      user: getNextAccount(),
      vaultProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_PROTOCOL_FEES_DISCRIMINATOR = new Uint8Array([
  11, 68, 165, 98, 18, 208, 134, 73,
]);

export function getWithdrawProtocolFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_PROTOCOL_FEES_DISCRIMINATOR
  );
}

export type WithdrawProtocolFeesInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountAVaultLp extends string | IAccountMeta<string> = string,
  TAccountProtocolTokenAFee extends string | IAccountMeta<string> = string,
  TAccountProtocolTokenBFee extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokenA extends string | IAccountMeta<string> = string,
  TAccountTreasuryTokenB extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountAVaultLp extends string
        ? ReadonlyAccount<TAccountAVaultLp>
        : TAccountAVaultLp,
      TAccountProtocolTokenAFee extends string
        ? WritableAccount<TAccountProtocolTokenAFee>
        : TAccountProtocolTokenAFee,
      TAccountProtocolTokenBFee extends string
        ? WritableAccount<TAccountProtocolTokenBFee>
        : TAccountProtocolTokenBFee,
      TAccountTreasuryTokenA extends string
        ? WritableAccount<TAccountTreasuryTokenA>
        : TAccountTreasuryTokenA,
      TAccountTreasuryTokenB extends string
        ? WritableAccount<TAccountTreasuryTokenB>
        : TAccountTreasuryTokenB,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawProtocolFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type WithdrawProtocolFeesInstructionDataArgs = {};

export function getWithdrawProtocolFeesInstructionDataEncoder(): Encoder<WithdrawProtocolFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_PROTOCOL_FEES_DISCRIMINATOR,
    })
  );
}

export function getWithdrawProtocolFeesInstructionDataDecoder(): Decoder<WithdrawProtocolFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawProtocolFeesInstructionDataCodec(): Codec<
  WithdrawProtocolFeesInstructionDataArgs,
  WithdrawProtocolFeesInstructionData
> {
  return combineCodec(
    getWithdrawProtocolFeesInstructionDataEncoder(),
    getWithdrawProtocolFeesInstructionDataDecoder()
  );
}

export type WithdrawProtocolFeesInput<
  TAccountPool extends string = string,
  TAccountAVaultLp extends string = string,
  TAccountProtocolTokenAFee extends string = string,
  TAccountProtocolTokenBFee extends string = string,
  TAccountTreasuryTokenA extends string = string,
  TAccountTreasuryTokenB extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Pool account (PDA) */
  pool: Address<TAccountPool>;
  aVaultLp: Address<TAccountAVaultLp>;
  protocolTokenAFee: Address<TAccountProtocolTokenAFee>;
  protocolTokenBFee: Address<TAccountProtocolTokenBFee>;
  treasuryTokenA: Address<TAccountTreasuryTokenA>;
  treasuryTokenB: Address<TAccountTreasuryTokenB>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getWithdrawProtocolFeesInstruction<
  TAccountPool extends string,
  TAccountAVaultLp extends string,
  TAccountProtocolTokenAFee extends string,
  TAccountProtocolTokenBFee extends string,
  TAccountTreasuryTokenA extends string,
  TAccountTreasuryTokenB extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: WithdrawProtocolFeesInput<
    TAccountPool,
    TAccountAVaultLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountTreasuryTokenA,
    TAccountTreasuryTokenB,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawProtocolFeesInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountAVaultLp,
  TAccountProtocolTokenAFee,
  TAccountProtocolTokenBFee,
  TAccountTreasuryTokenA,
  TAccountTreasuryTokenB,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    aVaultLp: { value: input.aVaultLp ?? null, isWritable: false },
    protocolTokenAFee: {
      value: input.protocolTokenAFee ?? null,
      isWritable: true,
    },
    protocolTokenBFee: {
      value: input.protocolTokenBFee ?? null,
      isWritable: true,
    },
    treasuryTokenA: { value: input.treasuryTokenA ?? null, isWritable: true },
    treasuryTokenB: { value: input.treasuryTokenB ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.aVaultLp),
      getAccountMeta(accounts.protocolTokenAFee),
      getAccountMeta(accounts.protocolTokenBFee),
      getAccountMeta(accounts.treasuryTokenA),
      getAccountMeta(accounts.treasuryTokenB),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawProtocolFeesInstructionDataEncoder().encode({}),
  } as WithdrawProtocolFeesInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountAVaultLp,
    TAccountProtocolTokenAFee,
    TAccountProtocolTokenBFee,
    TAccountTreasuryTokenA,
    TAccountTreasuryTokenB,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedWithdrawProtocolFeesInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account (PDA) */
    pool: TAccountMetas[0];
    aVaultLp: TAccountMetas[1];
    protocolTokenAFee: TAccountMetas[2];
    protocolTokenBFee: TAccountMetas[3];
    treasuryTokenA: TAccountMetas[4];
    treasuryTokenB: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: WithdrawProtocolFeesInstructionData;
};

export function parseWithdrawProtocolFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawProtocolFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      aVaultLp: getNextAccount(),
      protocolTokenAFee: getNextAccount(),
      protocolTokenBFee: getNextAccount(),
      treasuryTokenA: getNextAccount(),
      treasuryTokenB: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawProtocolFeesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { AMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ENABLE_OR_DISABLE_POOL_DISCRIMINATOR = new Uint8Array([
  128, 6, 228, 131, 55, 161, 52, 169,
]);

export function getEnableOrDisablePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ENABLE_OR_DISABLE_POOL_DISCRIMINATOR
  );
}

export type EnableOrDisablePoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type EnableOrDisablePoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  enable: boolean;
};

export type EnableOrDisablePoolInstructionDataArgs = { enable: boolean };

export function getEnableOrDisablePoolInstructionDataEncoder(): Encoder<EnableOrDisablePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['enable', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ENABLE_OR_DISABLE_POOL_DISCRIMINATOR,
    })
  );
}

export function getEnableOrDisablePoolInstructionDataDecoder(): Decoder<EnableOrDisablePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['enable', getBooleanDecoder()],
  ]);
}

export function getEnableOrDisablePoolInstructionDataCodec(): Codec<
  EnableOrDisablePoolInstructionDataArgs,
  EnableOrDisablePoolInstructionData
> {
  return combineCodec(
    getEnableOrDisablePoolInstructionDataEncoder(),
    getEnableOrDisablePoolInstructionDataDecoder()
  );
}

export type EnableOrDisablePoolInput<
  TAccountPool extends string = string,
  TAccountAdmin extends string = string,
> = {
  /** Pool account (PDA) */
  pool: Address<TAccountPool>;
  /** Admin account. Must be owner of the pool. */
  admin: TransactionSigner<TAccountAdmin>;
  enable: EnableOrDisablePoolInstructionDataArgs['enable'];
};

export function getEnableOrDisablePoolInstruction<
  TAccountPool extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof AMM_PROGRAM_ADDRESS,
>(
  input: EnableOrDisablePoolInput<TAccountPool, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): EnableOrDisablePoolInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.pool), getAccountMeta(accounts.admin)],
    programAddress,
    data: getEnableOrDisablePoolInstructionDataEncoder().encode(
      args as EnableOrDisablePoolInstructionDataArgs
    ),
  } as EnableOrDisablePoolInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedEnableOrDisablePoolInstruction<
  TProgram extends string = typeof AMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account (PDA) */
    pool: TAccountMetas[0];
    /** Admin account. Must be owner of the pool. */
    admin: TAccountMetas[1];
  };
  data: EnableOrDisablePoolInstructionData;
};

export function parseEnableOrDisablePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedEnableOrDisablePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getEnableOrDisablePoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

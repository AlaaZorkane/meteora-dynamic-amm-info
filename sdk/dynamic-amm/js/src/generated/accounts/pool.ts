/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  getBootstrappingDecoder,
  getBootstrappingEncoder,
  getCurveTypeDecoder,
  getCurveTypeEncoder,
  getPaddingDecoder,
  getPaddingEncoder,
  getPartnerInfoDecoder,
  getPartnerInfoEncoder,
  getPoolFeesDecoder,
  getPoolFeesEncoder,
  getPoolTypeDecoder,
  getPoolTypeEncoder,
  type Bootstrapping,
  type BootstrappingArgs,
  type CurveType,
  type CurveTypeArgs,
  type Padding,
  type PaddingArgs,
  type PartnerInfo,
  type PartnerInfoArgs,
  type PoolFees,
  type PoolFeesArgs,
  type PoolType,
  type PoolTypeArgs,
} from '../types';

export const POOL_DISCRIMINATOR = new Uint8Array([
  241, 154, 109, 4, 17, 177, 109, 188,
]);

export function getPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_DISCRIMINATOR);
}

export type Pool = {
  discriminator: ReadonlyUint8Array;
  /** LP token mint of the pool */
  lpMint: Address;
  /** Token A mint of the pool. Eg: USDT */
  tokenAMint: Address;
  /** Token B mint of the pool. Eg: USDC */
  tokenBMint: Address;
  /** Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account. */
  aVault: Address;
  /** Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account. */
  bVault: Address;
  /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  aVaultLp: Address;
  /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  bVaultLp: Address;
  /** "A" vault lp bump. Used to create signer seeds. */
  aVaultLpBump: number;
  /** Flag to determine whether the pool is enabled, or disabled. */
  enabled: boolean;
  /** Protocol fee token account for token A. Used to receive trading fee. */
  protocolTokenAFee: Address;
  /** Protocol fee token account for token B. Used to receive trading fee. */
  protocolTokenBFee: Address;
  /** Fee last updated timestamp */
  feeLastUpdatedAt: bigint;
  padding0: ReadonlyUint8Array;
  /** Store the fee charges setting. */
  fees: PoolFees;
  /** Pool type */
  poolType: PoolType;
  /** Stake pubkey of SPL stake pool */
  stake: Address;
  /** Total locked lp token */
  totalLockedLp: bigint;
  /** bootstrapping config */
  bootstrapping: Bootstrapping;
  partnerInfo: PartnerInfo;
  /** Padding for future pool field */
  padding: Padding;
  /** The type of the swap curve supported by the pool. */
  curveType: CurveType;
};

export type PoolArgs = {
  /** LP token mint of the pool */
  lpMint: Address;
  /** Token A mint of the pool. Eg: USDT */
  tokenAMint: Address;
  /** Token B mint of the pool. Eg: USDC */
  tokenBMint: Address;
  /** Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account. */
  aVault: Address;
  /** Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account. */
  bVault: Address;
  /** LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  aVaultLp: Address;
  /** LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault. */
  bVaultLp: Address;
  /** "A" vault lp bump. Used to create signer seeds. */
  aVaultLpBump: number;
  /** Flag to determine whether the pool is enabled, or disabled. */
  enabled: boolean;
  /** Protocol fee token account for token A. Used to receive trading fee. */
  protocolTokenAFee: Address;
  /** Protocol fee token account for token B. Used to receive trading fee. */
  protocolTokenBFee: Address;
  /** Fee last updated timestamp */
  feeLastUpdatedAt: number | bigint;
  padding0: ReadonlyUint8Array;
  /** Store the fee charges setting. */
  fees: PoolFeesArgs;
  /** Pool type */
  poolType: PoolTypeArgs;
  /** Stake pubkey of SPL stake pool */
  stake: Address;
  /** Total locked lp token */
  totalLockedLp: number | bigint;
  /** bootstrapping config */
  bootstrapping: BootstrappingArgs;
  partnerInfo: PartnerInfoArgs;
  /** Padding for future pool field */
  padding: PaddingArgs;
  /** The type of the swap curve supported by the pool. */
  curveType: CurveTypeArgs;
};

export function getPoolEncoder(): Encoder<PoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lpMint', getAddressEncoder()],
      ['tokenAMint', getAddressEncoder()],
      ['tokenBMint', getAddressEncoder()],
      ['aVault', getAddressEncoder()],
      ['bVault', getAddressEncoder()],
      ['aVaultLp', getAddressEncoder()],
      ['bVaultLp', getAddressEncoder()],
      ['aVaultLpBump', getU8Encoder()],
      ['enabled', getBooleanEncoder()],
      ['protocolTokenAFee', getAddressEncoder()],
      ['protocolTokenBFee', getAddressEncoder()],
      ['feeLastUpdatedAt', getU64Encoder()],
      ['padding0', fixEncoderSize(getBytesEncoder(), 24)],
      ['fees', getPoolFeesEncoder()],
      ['poolType', getPoolTypeEncoder()],
      ['stake', getAddressEncoder()],
      ['totalLockedLp', getU64Encoder()],
      ['bootstrapping', getBootstrappingEncoder()],
      ['partnerInfo', getPartnerInfoEncoder()],
      ['padding', getPaddingEncoder()],
      ['curveType', getCurveTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: POOL_DISCRIMINATOR })
  );
}

export function getPoolDecoder(): Decoder<Pool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lpMint', getAddressDecoder()],
    ['tokenAMint', getAddressDecoder()],
    ['tokenBMint', getAddressDecoder()],
    ['aVault', getAddressDecoder()],
    ['bVault', getAddressDecoder()],
    ['aVaultLp', getAddressDecoder()],
    ['bVaultLp', getAddressDecoder()],
    ['aVaultLpBump', getU8Decoder()],
    ['enabled', getBooleanDecoder()],
    ['protocolTokenAFee', getAddressDecoder()],
    ['protocolTokenBFee', getAddressDecoder()],
    ['feeLastUpdatedAt', getU64Decoder()],
    ['padding0', fixDecoderSize(getBytesDecoder(), 24)],
    ['fees', getPoolFeesDecoder()],
    ['poolType', getPoolTypeDecoder()],
    ['stake', getAddressDecoder()],
    ['totalLockedLp', getU64Decoder()],
    ['bootstrapping', getBootstrappingDecoder()],
    ['partnerInfo', getPartnerInfoDecoder()],
    ['padding', getPaddingDecoder()],
    ['curveType', getCurveTypeDecoder()],
  ]);
}

export function getPoolCodec(): Codec<PoolArgs, Pool> {
  return combineCodec(getPoolEncoder(), getPoolDecoder());
}

export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pool, TAddress> | MaybeAccount<Pool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolDecoder()
  );
}

export async function fetchPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pool, TAddress>> {
  const maybeAccount = await fetchMaybePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePool(maybeAccount);
}

export async function fetchAllPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pool>[]> {
  const maybeAccounts = await fetchAllMaybePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePool(maybeAccount));
}

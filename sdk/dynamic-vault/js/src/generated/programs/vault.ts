/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedAddStrategyInstruction,
  type ParsedCollectDustInstruction,
  type ParsedDepositInstruction,
  type ParsedDepositStrategyInstruction,
  type ParsedEnableVaultInstruction,
  type ParsedInitializeInstruction,
  type ParsedInitializeStrategyInstruction,
  type ParsedRemoveStrategy2Instruction,
  type ParsedRemoveStrategyInstruction,
  type ParsedSetOperatorInstruction,
  type ParsedWithdraw2Instruction,
  type ParsedWithdrawDirectlyFromStrategyInstruction,
  type ParsedWithdrawInstruction,
  type ParsedWithdrawStrategyInstruction,
} from '../instructions';

export const VAULT_PROGRAM_ADDRESS = '' as Address<''>;

export enum VaultAccount {
  Vault,
  Strategy,
}

export function identifyVaultAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VaultAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 8, 232, 43, 2, 152, 117, 119])
      ),
      0
    )
  ) {
    return VaultAccount.Vault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([174, 110, 39, 119, 82, 106, 169, 102])
      ),
      0
    )
  ) {
    return VaultAccount.Strategy;
  }
  throw new Error(
    'The provided account could not be identified as a vault account.'
  );
}

export enum VaultInstruction {
  Initialize,
  EnableVault,
  SetOperator,
  InitializeStrategy,
  RemoveStrategy,
  RemoveStrategy2,
  CollectDust,
  AddStrategy,
  DepositStrategy,
  WithdrawStrategy,
  Withdraw2,
  Deposit,
  Withdraw,
  WithdrawDirectlyFromStrategy,
}

export function identifyVaultInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VaultInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return VaultInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 82, 241, 156, 26, 154, 233, 211])
      ),
      0
    )
  ) {
    return VaultInstruction.EnableVault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 153, 101, 169, 243, 131, 36, 1])
      ),
      0
    )
  ) {
    return VaultInstruction.SetOperator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 119, 144, 145, 178, 57, 105, 252])
      ),
      0
    )
  ) {
    return VaultInstruction.InitializeStrategy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 238, 33, 91, 134, 210, 97, 26])
      ),
      0
    )
  ) {
    return VaultInstruction.RemoveStrategy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 104, 208, 148, 126, 35, 195, 14])
      ),
      0
    )
  ) {
    return VaultInstruction.RemoveStrategy2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 149, 21, 82, 160, 74, 254, 240])
      ),
      0
    )
  ) {
    return VaultInstruction.CollectDust;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([64, 123, 127, 227, 192, 234, 198, 20])
      ),
      0
    )
  ) {
    return VaultInstruction.AddStrategy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 82, 57, 226, 131, 222, 253, 249])
      ),
      0
    )
  ) {
    return VaultInstruction.DepositStrategy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([31, 45, 162, 5, 193, 217, 134, 188])
      ),
      0
    )
  ) {
    return VaultInstruction.WithdrawStrategy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 6, 111, 73, 174, 211, 66, 132])
      ),
      0
    )
  ) {
    return VaultInstruction.Withdraw2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return VaultInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return VaultInstruction.Withdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 141, 146, 46, 173, 116, 198, 22])
      ),
      0
    )
  ) {
    return VaultInstruction.WithdrawDirectlyFromStrategy;
  }
  throw new Error(
    'The provided instruction could not be identified as a vault instruction.'
  );
}

export type ParsedVaultInstruction<TProgram extends string = ''> =
  | ({
      instructionType: VaultInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.EnableVault;
    } & ParsedEnableVaultInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.SetOperator;
    } & ParsedSetOperatorInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.InitializeStrategy;
    } & ParsedInitializeStrategyInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.RemoveStrategy;
    } & ParsedRemoveStrategyInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.RemoveStrategy2;
    } & ParsedRemoveStrategy2Instruction<TProgram>)
  | ({
      instructionType: VaultInstruction.CollectDust;
    } & ParsedCollectDustInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.AddStrategy;
    } & ParsedAddStrategyInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.DepositStrategy;
    } & ParsedDepositStrategyInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.WithdrawStrategy;
    } & ParsedWithdrawStrategyInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Withdraw2;
    } & ParsedWithdraw2Instruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>)
  | ({
      instructionType: VaultInstruction.WithdrawDirectlyFromStrategy;
    } & ParsedWithdrawDirectlyFromStrategyInstruction<TProgram>);

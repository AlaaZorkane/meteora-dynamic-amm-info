/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_STRATEGY_DISCRIMINATOR = new Uint8Array([
  64, 123, 127, 227, 192, 234, 198, 20,
]);

export function getAddStrategyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_STRATEGY_DISCRIMINATOR
  );
}

export type AddStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountStrategy extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountStrategy extends string
        ? ReadonlyAccount<TAccountStrategy>
        : TAccountStrategy,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type AddStrategyInstructionData = { discriminator: ReadonlyUint8Array };

export type AddStrategyInstructionDataArgs = {};

export function getAddStrategyInstructionDataEncoder(): Encoder<AddStrategyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: ADD_STRATEGY_DISCRIMINATOR })
  );
}

export function getAddStrategyInstructionDataDecoder(): Decoder<AddStrategyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAddStrategyInstructionDataCodec(): Codec<
  AddStrategyInstructionDataArgs,
  AddStrategyInstructionData
> {
  return combineCodec(
    getAddStrategyInstructionDataEncoder(),
    getAddStrategyInstructionDataDecoder()
  );
}

export type AddStrategyInput<
  TAccountVault extends string = string,
  TAccountStrategy extends string = string,
  TAccountAdmin extends string = string,
> = {
  /** vault */
  vault: Address<TAccountVault>;
  /** strategy */
  strategy: Address<TAccountStrategy>;
  /** admin */
  admin: TransactionSigner<TAccountAdmin>;
};

export function getAddStrategyInstruction<
  TAccountVault extends string,
  TAccountStrategy extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: AddStrategyInput<TAccountVault, TAccountStrategy, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): AddStrategyInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountStrategy,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    strategy: { value: input.strategy ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.strategy),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getAddStrategyInstructionDataEncoder().encode({}),
  } as AddStrategyInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountStrategy,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedAddStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** vault */
    vault: TAccountMetas[0];
    /** strategy */
    strategy: TAccountMetas[1];
    /** admin */
    admin: TAccountMetas[2];
  };
  data: AddStrategyInstructionData;
};

export function parseAddStrategyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddStrategyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      strategy: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getAddStrategyInstructionDataDecoder().decode(instruction.data),
  };
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ENABLE_VAULT_DISCRIMINATOR = new Uint8Array([
  145, 82, 241, 156, 26, 154, 233, 211,
]);

export function getEnableVaultDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ENABLE_VAULT_DISCRIMINATOR
  );
}

export type EnableVaultInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type EnableVaultInstructionData = {
  discriminator: ReadonlyUint8Array;
  enabled: number;
};

export type EnableVaultInstructionDataArgs = { enabled: number };

export function getEnableVaultInstructionDataEncoder(): Encoder<EnableVaultInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['enabled', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ENABLE_VAULT_DISCRIMINATOR })
  );
}

export function getEnableVaultInstructionDataDecoder(): Decoder<EnableVaultInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['enabled', getU8Decoder()],
  ]);
}

export function getEnableVaultInstructionDataCodec(): Codec<
  EnableVaultInstructionDataArgs,
  EnableVaultInstructionData
> {
  return combineCodec(
    getEnableVaultInstructionDataEncoder(),
    getEnableVaultInstructionDataDecoder()
  );
}

export type EnableVaultInput<
  TAccountVault extends string = string,
  TAccountAdmin extends string = string,
> = {
  /** Vault account */
  vault: Address<TAccountVault>;
  /** Admin account */
  admin: TransactionSigner<TAccountAdmin>;
  enabled: EnableVaultInstructionDataArgs['enabled'];
};

export function getEnableVaultInstruction<
  TAccountVault extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: EnableVaultInput<TAccountVault, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): EnableVaultInstruction<TProgramAddress, TAccountVault, TAccountAdmin> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.vault), getAccountMeta(accounts.admin)],
    programAddress,
    data: getEnableVaultInstructionDataEncoder().encode(
      args as EnableVaultInstructionDataArgs
    ),
  } as EnableVaultInstruction<TProgramAddress, TAccountVault, TAccountAdmin>;

  return instruction;
}

export type ParsedEnableVaultInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Vault account */
    vault: TAccountMetas[0];
    /** Admin account */
    admin: TAccountMetas[1];
  };
  data: EnableVaultInstructionData;
};

export function parseEnableVaultInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedEnableVaultInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getEnableVaultInstructionDataDecoder().decode(instruction.data),
  };
}

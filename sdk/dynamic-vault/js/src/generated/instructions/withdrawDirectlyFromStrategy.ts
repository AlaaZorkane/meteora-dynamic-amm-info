/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_DIRECTLY_FROM_STRATEGY_DISCRIMINATOR = new Uint8Array([
  201, 141, 146, 46, 173, 116, 198, 22,
]);

export function getWithdrawDirectlyFromStrategyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_DIRECTLY_FROM_STRATEGY_DISCRIMINATOR
  );
}

export type WithdrawDirectlyFromStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountStrategy extends string | IAccountMeta<string> = string,
  TAccountReserve extends string | IAccountMeta<string> = string,
  TAccountStrategyProgram extends string | IAccountMeta<string> = string,
  TAccountCollateralVault extends string | IAccountMeta<string> = string,
  TAccountTokenVault extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountUserToken extends string | IAccountMeta<string> = string,
  TAccountUserLp extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountStrategy extends string
        ? WritableAccount<TAccountStrategy>
        : TAccountStrategy,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountStrategyProgram extends string
        ? ReadonlyAccount<TAccountStrategyProgram>
        : TAccountStrategyProgram,
      TAccountCollateralVault extends string
        ? WritableAccount<TAccountCollateralVault>
        : TAccountCollateralVault,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountUserToken extends string
        ? WritableAccount<TAccountUserToken>
        : TAccountUserToken,
      TAccountUserLp extends string
        ? WritableAccount<TAccountUserLp>
        : TAccountUserLp,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawDirectlyFromStrategyInstructionData = {
  discriminator: ReadonlyUint8Array;
  unmintAmount: bigint;
  minOutAmount: bigint;
};

export type WithdrawDirectlyFromStrategyInstructionDataArgs = {
  unmintAmount: number | bigint;
  minOutAmount: number | bigint;
};

export function getWithdrawDirectlyFromStrategyInstructionDataEncoder(): Encoder<WithdrawDirectlyFromStrategyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['unmintAmount', getU64Encoder()],
      ['minOutAmount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_DIRECTLY_FROM_STRATEGY_DISCRIMINATOR,
    })
  );
}

export function getWithdrawDirectlyFromStrategyInstructionDataDecoder(): Decoder<WithdrawDirectlyFromStrategyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['unmintAmount', getU64Decoder()],
    ['minOutAmount', getU64Decoder()],
  ]);
}

export function getWithdrawDirectlyFromStrategyInstructionDataCodec(): Codec<
  WithdrawDirectlyFromStrategyInstructionDataArgs,
  WithdrawDirectlyFromStrategyInstructionData
> {
  return combineCodec(
    getWithdrawDirectlyFromStrategyInstructionDataEncoder(),
    getWithdrawDirectlyFromStrategyInstructionDataDecoder()
  );
}

export type WithdrawDirectlyFromStrategyInput<
  TAccountVault extends string = string,
  TAccountStrategy extends string = string,
  TAccountReserve extends string = string,
  TAccountStrategyProgram extends string = string,
  TAccountCollateralVault extends string = string,
  TAccountTokenVault extends string = string,
  TAccountLpMint extends string = string,
  TAccountFeeVault extends string = string,
  TAccountUserToken extends string = string,
  TAccountUserLp extends string = string,
  TAccountUser extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** vault */
  vault: Address<TAccountVault>;
  /** strategy */
  strategy: Address<TAccountStrategy>;
  reserve: Address<TAccountReserve>;
  strategyProgram: Address<TAccountStrategyProgram>;
  /** collateral_vault */
  collateralVault: Address<TAccountCollateralVault>;
  /** token_vault */
  tokenVault: Address<TAccountTokenVault>;
  /** lp_mint */
  lpMint: Address<TAccountLpMint>;
  /** fee_vault */
  feeVault: Address<TAccountFeeVault>;
  /** user_token */
  userToken: Address<TAccountUserToken>;
  /** user_lp */
  userLp: Address<TAccountUserLp>;
  /** user */
  user: TransactionSigner<TAccountUser>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  unmintAmount: WithdrawDirectlyFromStrategyInstructionDataArgs['unmintAmount'];
  minOutAmount: WithdrawDirectlyFromStrategyInstructionDataArgs['minOutAmount'];
};

export function getWithdrawDirectlyFromStrategyInstruction<
  TAccountVault extends string,
  TAccountStrategy extends string,
  TAccountReserve extends string,
  TAccountStrategyProgram extends string,
  TAccountCollateralVault extends string,
  TAccountTokenVault extends string,
  TAccountLpMint extends string,
  TAccountFeeVault extends string,
  TAccountUserToken extends string,
  TAccountUserLp extends string,
  TAccountUser extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: WithdrawDirectlyFromStrategyInput<
    TAccountVault,
    TAccountStrategy,
    TAccountReserve,
    TAccountStrategyProgram,
    TAccountCollateralVault,
    TAccountTokenVault,
    TAccountLpMint,
    TAccountFeeVault,
    TAccountUserToken,
    TAccountUserLp,
    TAccountUser,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawDirectlyFromStrategyInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountStrategy,
  TAccountReserve,
  TAccountStrategyProgram,
  TAccountCollateralVault,
  TAccountTokenVault,
  TAccountLpMint,
  TAccountFeeVault,
  TAccountUserToken,
  TAccountUserLp,
  TAccountUser,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    strategy: { value: input.strategy ?? null, isWritable: true },
    reserve: { value: input.reserve ?? null, isWritable: true },
    strategyProgram: {
      value: input.strategyProgram ?? null,
      isWritable: false,
    },
    collateralVault: { value: input.collateralVault ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    userToken: { value: input.userToken ?? null, isWritable: true },
    userLp: { value: input.userLp ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.strategy),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.strategyProgram),
      getAccountMeta(accounts.collateralVault),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.userToken),
      getAccountMeta(accounts.userLp),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawDirectlyFromStrategyInstructionDataEncoder().encode(
      args as WithdrawDirectlyFromStrategyInstructionDataArgs
    ),
  } as WithdrawDirectlyFromStrategyInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountStrategy,
    TAccountReserve,
    TAccountStrategyProgram,
    TAccountCollateralVault,
    TAccountTokenVault,
    TAccountLpMint,
    TAccountFeeVault,
    TAccountUserToken,
    TAccountUserLp,
    TAccountUser,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedWithdrawDirectlyFromStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** vault */
    vault: TAccountMetas[0];
    /** strategy */
    strategy: TAccountMetas[1];
    reserve: TAccountMetas[2];
    strategyProgram: TAccountMetas[3];
    /** collateral_vault */
    collateralVault: TAccountMetas[4];
    /** token_vault */
    tokenVault: TAccountMetas[5];
    /** lp_mint */
    lpMint: TAccountMetas[6];
    /** fee_vault */
    feeVault: TAccountMetas[7];
    /** user_token */
    userToken: TAccountMetas[8];
    /** user_lp */
    userLp: TAccountMetas[9];
    /** user */
    user: TAccountMetas[10];
    /** token_program */
    tokenProgram: TAccountMetas[11];
  };
  data: WithdrawDirectlyFromStrategyInstructionData;
};

export function parseWithdrawDirectlyFromStrategyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawDirectlyFromStrategyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      strategy: getNextAccount(),
      reserve: getNextAccount(),
      strategyProgram: getNextAccount(),
      collateralVault: getNextAccount(),
      tokenVault: getNextAccount(),
      lpMint: getNextAccount(),
      feeVault: getNextAccount(),
      userToken: getNextAccount(),
      userLp: getNextAccount(),
      user: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawDirectlyFromStrategyInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

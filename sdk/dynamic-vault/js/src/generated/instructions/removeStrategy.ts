/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_STRATEGY_DISCRIMINATOR = new Uint8Array([
  185, 238, 33, 91, 134, 210, 97, 26,
]);

export function getRemoveStrategyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_STRATEGY_DISCRIMINATOR
  );
}

export type RemoveStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountStrategy extends string | IAccountMeta<string> = string,
  TAccountStrategyProgram extends string | IAccountMeta<string> = string,
  TAccountCollateralVault extends string | IAccountMeta<string> = string,
  TAccountReserve extends string | IAccountMeta<string> = string,
  TAccountTokenVault extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountStrategy extends string
        ? WritableAccount<TAccountStrategy>
        : TAccountStrategy,
      TAccountStrategyProgram extends string
        ? ReadonlyAccount<TAccountStrategyProgram>
        : TAccountStrategyProgram,
      TAccountCollateralVault extends string
        ? WritableAccount<TAccountCollateralVault>
        : TAccountCollateralVault,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveStrategyInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type RemoveStrategyInstructionDataArgs = {};

export function getRemoveStrategyInstructionDataEncoder(): Encoder<RemoveStrategyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REMOVE_STRATEGY_DISCRIMINATOR })
  );
}

export function getRemoveStrategyInstructionDataDecoder(): Decoder<RemoveStrategyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRemoveStrategyInstructionDataCodec(): Codec<
  RemoveStrategyInstructionDataArgs,
  RemoveStrategyInstructionData
> {
  return combineCodec(
    getRemoveStrategyInstructionDataEncoder(),
    getRemoveStrategyInstructionDataDecoder()
  );
}

export type RemoveStrategyInput<
  TAccountVault extends string = string,
  TAccountStrategy extends string = string,
  TAccountStrategyProgram extends string = string,
  TAccountCollateralVault extends string = string,
  TAccountReserve extends string = string,
  TAccountTokenVault extends string = string,
  TAccountFeeVault extends string = string,
  TAccountLpMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdmin extends string = string,
> = {
  /** Vault account */
  vault: Address<TAccountVault>;
  /** Strategy account */
  strategy: Address<TAccountStrategy>;
  strategyProgram: Address<TAccountStrategyProgram>;
  /** Collateral vault account */
  collateralVault: Address<TAccountCollateralVault>;
  reserve: Address<TAccountReserve>;
  /** token_vault */
  tokenVault: Address<TAccountTokenVault>;
  /** fee_vault */
  feeVault: Address<TAccountFeeVault>;
  /** lp_mint */
  lpMint: Address<TAccountLpMint>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** admin */
  admin: TransactionSigner<TAccountAdmin>;
};

export function getRemoveStrategyInstruction<
  TAccountVault extends string,
  TAccountStrategy extends string,
  TAccountStrategyProgram extends string,
  TAccountCollateralVault extends string,
  TAccountReserve extends string,
  TAccountTokenVault extends string,
  TAccountFeeVault extends string,
  TAccountLpMint extends string,
  TAccountTokenProgram extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: RemoveStrategyInput<
    TAccountVault,
    TAccountStrategy,
    TAccountStrategyProgram,
    TAccountCollateralVault,
    TAccountReserve,
    TAccountTokenVault,
    TAccountFeeVault,
    TAccountLpMint,
    TAccountTokenProgram,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveStrategyInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountStrategy,
  TAccountStrategyProgram,
  TAccountCollateralVault,
  TAccountReserve,
  TAccountTokenVault,
  TAccountFeeVault,
  TAccountLpMint,
  TAccountTokenProgram,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    strategy: { value: input.strategy ?? null, isWritable: true },
    strategyProgram: {
      value: input.strategyProgram ?? null,
      isWritable: false,
    },
    collateralVault: { value: input.collateralVault ?? null, isWritable: true },
    reserve: { value: input.reserve ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.strategy),
      getAccountMeta(accounts.strategyProgram),
      getAccountMeta(accounts.collateralVault),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getRemoveStrategyInstructionDataEncoder().encode({}),
  } as RemoveStrategyInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountStrategy,
    TAccountStrategyProgram,
    TAccountCollateralVault,
    TAccountReserve,
    TAccountTokenVault,
    TAccountFeeVault,
    TAccountLpMint,
    TAccountTokenProgram,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedRemoveStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Vault account */
    vault: TAccountMetas[0];
    /** Strategy account */
    strategy: TAccountMetas[1];
    strategyProgram: TAccountMetas[2];
    /** Collateral vault account */
    collateralVault: TAccountMetas[3];
    reserve: TAccountMetas[4];
    /** token_vault */
    tokenVault: TAccountMetas[5];
    /** fee_vault */
    feeVault: TAccountMetas[6];
    /** lp_mint */
    lpMint: TAccountMetas[7];
    /** token_program */
    tokenProgram: TAccountMetas[8];
    /** admin */
    admin: TAccountMetas[9];
  };
  data: RemoveStrategyInstructionData;
};

export function parseRemoveStrategyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveStrategyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      strategy: getNextAccount(),
      strategyProgram: getNextAccount(),
      collateralVault: getNextAccount(),
      reserve: getNextAccount(),
      tokenVault: getNextAccount(),
      feeVault: getNextAccount(),
      lpMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getRemoveStrategyInstructionDataDecoder().decode(instruction.data),
  };
}

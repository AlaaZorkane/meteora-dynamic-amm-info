/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_STRATEGY2_DISCRIMINATOR = new Uint8Array([
  138, 104, 208, 148, 126, 35, 195, 14,
]);

export function getRemoveStrategy2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_STRATEGY2_DISCRIMINATOR
  );
}

export type RemoveStrategy2Instruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountStrategy extends string | IAccountMeta<string> = string,
  TAccountStrategyProgram extends string | IAccountMeta<string> = string,
  TAccountCollateralVault extends string | IAccountMeta<string> = string,
  TAccountReserve extends string | IAccountMeta<string> = string,
  TAccountTokenVault extends string | IAccountMeta<string> = string,
  TAccountTokenAdminAdvancePayment extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenVaultAdvancePayment extends
    | string
    | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountStrategy extends string
        ? WritableAccount<TAccountStrategy>
        : TAccountStrategy,
      TAccountStrategyProgram extends string
        ? ReadonlyAccount<TAccountStrategyProgram>
        : TAccountStrategyProgram,
      TAccountCollateralVault extends string
        ? WritableAccount<TAccountCollateralVault>
        : TAccountCollateralVault,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountTokenAdminAdvancePayment extends string
        ? WritableAccount<TAccountTokenAdminAdvancePayment>
        : TAccountTokenAdminAdvancePayment,
      TAccountTokenVaultAdvancePayment extends string
        ? WritableAccount<TAccountTokenVaultAdvancePayment>
        : TAccountTokenVaultAdvancePayment,
      TAccountFeeVault extends string
        ? WritableAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveStrategy2InstructionData = {
  discriminator: ReadonlyUint8Array;
  maxAdminPayAmount: bigint;
};

export type RemoveStrategy2InstructionDataArgs = {
  maxAdminPayAmount: number | bigint;
};

export function getRemoveStrategy2InstructionDataEncoder(): Encoder<RemoveStrategy2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxAdminPayAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_STRATEGY2_DISCRIMINATOR })
  );
}

export function getRemoveStrategy2InstructionDataDecoder(): Decoder<RemoveStrategy2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxAdminPayAmount', getU64Decoder()],
  ]);
}

export function getRemoveStrategy2InstructionDataCodec(): Codec<
  RemoveStrategy2InstructionDataArgs,
  RemoveStrategy2InstructionData
> {
  return combineCodec(
    getRemoveStrategy2InstructionDataEncoder(),
    getRemoveStrategy2InstructionDataDecoder()
  );
}

export type RemoveStrategy2Input<
  TAccountVault extends string = string,
  TAccountStrategy extends string = string,
  TAccountStrategyProgram extends string = string,
  TAccountCollateralVault extends string = string,
  TAccountReserve extends string = string,
  TAccountTokenVault extends string = string,
  TAccountTokenAdminAdvancePayment extends string = string,
  TAccountTokenVaultAdvancePayment extends string = string,
  TAccountFeeVault extends string = string,
  TAccountLpMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdmin extends string = string,
> = {
  /** Vault account */
  vault: Address<TAccountVault>;
  /** Strategy account */
  strategy: Address<TAccountStrategy>;
  strategyProgram: Address<TAccountStrategyProgram>;
  /** Collateral vault account */
  collateralVault: Address<TAccountCollateralVault>;
  reserve: Address<TAccountReserve>;
  /** token_vault */
  tokenVault: Address<TAccountTokenVault>;
  /**
   * token_advance_payemnt
   * the owner of token_advance_payment must be admin
   */
  tokenAdminAdvancePayment: Address<TAccountTokenAdminAdvancePayment>;
  /**
   * token_vault_advance_payment
   * the account must be different from token_vault
   * the owner of token_advance_payment must be vault
   */
  tokenVaultAdvancePayment: Address<TAccountTokenVaultAdvancePayment>;
  /** fee_vault */
  feeVault: Address<TAccountFeeVault>;
  /** lp_mint */
  lpMint: Address<TAccountLpMint>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** admin */
  admin: TransactionSigner<TAccountAdmin>;
  maxAdminPayAmount: RemoveStrategy2InstructionDataArgs['maxAdminPayAmount'];
};

export function getRemoveStrategy2Instruction<
  TAccountVault extends string,
  TAccountStrategy extends string,
  TAccountStrategyProgram extends string,
  TAccountCollateralVault extends string,
  TAccountReserve extends string,
  TAccountTokenVault extends string,
  TAccountTokenAdminAdvancePayment extends string,
  TAccountTokenVaultAdvancePayment extends string,
  TAccountFeeVault extends string,
  TAccountLpMint extends string,
  TAccountTokenProgram extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: RemoveStrategy2Input<
    TAccountVault,
    TAccountStrategy,
    TAccountStrategyProgram,
    TAccountCollateralVault,
    TAccountReserve,
    TAccountTokenVault,
    TAccountTokenAdminAdvancePayment,
    TAccountTokenVaultAdvancePayment,
    TAccountFeeVault,
    TAccountLpMint,
    TAccountTokenProgram,
    TAccountAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveStrategy2Instruction<
  TProgramAddress,
  TAccountVault,
  TAccountStrategy,
  TAccountStrategyProgram,
  TAccountCollateralVault,
  TAccountReserve,
  TAccountTokenVault,
  TAccountTokenAdminAdvancePayment,
  TAccountTokenVaultAdvancePayment,
  TAccountFeeVault,
  TAccountLpMint,
  TAccountTokenProgram,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    strategy: { value: input.strategy ?? null, isWritable: true },
    strategyProgram: {
      value: input.strategyProgram ?? null,
      isWritable: false,
    },
    collateralVault: { value: input.collateralVault ?? null, isWritable: true },
    reserve: { value: input.reserve ?? null, isWritable: true },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    tokenAdminAdvancePayment: {
      value: input.tokenAdminAdvancePayment ?? null,
      isWritable: true,
    },
    tokenVaultAdvancePayment: {
      value: input.tokenVaultAdvancePayment ?? null,
      isWritable: true,
    },
    feeVault: { value: input.feeVault ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.strategy),
      getAccountMeta(accounts.strategyProgram),
      getAccountMeta(accounts.collateralVault),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.tokenAdminAdvancePayment),
      getAccountMeta(accounts.tokenVaultAdvancePayment),
      getAccountMeta(accounts.feeVault),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getRemoveStrategy2InstructionDataEncoder().encode(
      args as RemoveStrategy2InstructionDataArgs
    ),
  } as RemoveStrategy2Instruction<
    TProgramAddress,
    TAccountVault,
    TAccountStrategy,
    TAccountStrategyProgram,
    TAccountCollateralVault,
    TAccountReserve,
    TAccountTokenVault,
    TAccountTokenAdminAdvancePayment,
    TAccountTokenVaultAdvancePayment,
    TAccountFeeVault,
    TAccountLpMint,
    TAccountTokenProgram,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedRemoveStrategy2Instruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Vault account */
    vault: TAccountMetas[0];
    /** Strategy account */
    strategy: TAccountMetas[1];
    strategyProgram: TAccountMetas[2];
    /** Collateral vault account */
    collateralVault: TAccountMetas[3];
    reserve: TAccountMetas[4];
    /** token_vault */
    tokenVault: TAccountMetas[5];
    /**
     * token_advance_payemnt
     * the owner of token_advance_payment must be admin
     */

    tokenAdminAdvancePayment: TAccountMetas[6];
    /**
     * token_vault_advance_payment
     * the account must be different from token_vault
     * the owner of token_advance_payment must be vault
     */

    tokenVaultAdvancePayment: TAccountMetas[7];
    /** fee_vault */
    feeVault: TAccountMetas[8];
    /** lp_mint */
    lpMint: TAccountMetas[9];
    /** token_program */
    tokenProgram: TAccountMetas[10];
    /** admin */
    admin: TAccountMetas[11];
  };
  data: RemoveStrategy2InstructionData;
};

export function parseRemoveStrategy2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveStrategy2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      strategy: getNextAccount(),
      strategyProgram: getNextAccount(),
      collateralVault: getNextAccount(),
      reserve: getNextAccount(),
      tokenVault: getNextAccount(),
      tokenAdminAdvancePayment: getNextAccount(),
      tokenVaultAdvancePayment: getNextAccount(),
      feeVault: getNextAccount(),
      lpMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getRemoveStrategy2InstructionDataDecoder().decode(instruction.data),
  };
}

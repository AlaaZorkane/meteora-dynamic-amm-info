/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getStrategyTypeDecoder,
  getStrategyTypeEncoder,
  type StrategyType,
  type StrategyTypeArgs,
} from '../types';

export const INITIALIZE_STRATEGY_DISCRIMINATOR = new Uint8Array([
  208, 119, 144, 145, 178, 57, 105, 252,
]);

export function getInitializeStrategyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_STRATEGY_DISCRIMINATOR
  );
}

export type InitializeStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountStrategyProgram extends string | IAccountMeta<string> = string,
  TAccountStrategy extends string | IAccountMeta<string> = string,
  TAccountReserve extends string | IAccountMeta<string> = string,
  TAccountCollateralVault extends string | IAccountMeta<string> = string,
  TAccountCollateralMint extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountStrategyProgram extends string
        ? ReadonlyAccount<TAccountStrategyProgram>
        : TAccountStrategyProgram,
      TAccountStrategy extends string
        ? WritableAccount<TAccountStrategy>
        : TAccountStrategy,
      TAccountReserve extends string
        ? WritableAccount<TAccountReserve>
        : TAccountReserve,
      TAccountCollateralVault extends string
        ? WritableAccount<TAccountCollateralVault>
        : TAccountCollateralVault,
      TAccountCollateralMint extends string
        ? ReadonlyAccount<TAccountCollateralMint>
        : TAccountCollateralMint,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeStrategyInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** strategy_index */
  strategyIndex: number;
  /** Bumps of PDAs for the integrated protocol. */
  otherBumps: ReadonlyUint8Array;
  strategyType: StrategyType;
};

export type InitializeStrategyInstructionDataArgs = {
  /** strategy_index */
  strategyIndex: number;
  /** Bumps of PDAs for the integrated protocol. */
  otherBumps: ReadonlyUint8Array;
  strategyType: StrategyTypeArgs;
};

export function getInitializeStrategyInstructionDataEncoder(): Encoder<InitializeStrategyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['strategyIndex', getU8Encoder()],
      ['otherBumps', fixEncoderSize(getBytesEncoder(), 10)],
      ['strategyType', getStrategyTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_STRATEGY_DISCRIMINATOR })
  );
}

export function getInitializeStrategyInstructionDataDecoder(): Decoder<InitializeStrategyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['strategyIndex', getU8Decoder()],
    ['otherBumps', fixDecoderSize(getBytesDecoder(), 10)],
    ['strategyType', getStrategyTypeDecoder()],
  ]);
}

export function getInitializeStrategyInstructionDataCodec(): Codec<
  InitializeStrategyInstructionDataArgs,
  InitializeStrategyInstructionData
> {
  return combineCodec(
    getInitializeStrategyInstructionDataEncoder(),
    getInitializeStrategyInstructionDataDecoder()
  );
}

export type InitializeStrategyInput<
  TAccountVault extends string = string,
  TAccountStrategyProgram extends string = string,
  TAccountStrategy extends string = string,
  TAccountReserve extends string = string,
  TAccountCollateralVault extends string = string,
  TAccountCollateralMint extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Vault account */
  vault: Address<TAccountVault>;
  strategyProgram: Address<TAccountStrategyProgram>;
  /** Strategy account */
  strategy: Address<TAccountStrategy>;
  reserve: Address<TAccountReserve>;
  /** Collateral vault account */
  collateralVault: Address<TAccountCollateralVault>;
  /** Collateral mint account */
  collateralMint: Address<TAccountCollateralMint>;
  /** Admin account */
  admin: TransactionSigner<TAccountAdmin>;
  /** System program account */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Rent account */
  rent?: Address<TAccountRent>;
  /** Token program account */
  tokenProgram?: Address<TAccountTokenProgram>;
  strategyIndex: InitializeStrategyInstructionDataArgs['strategyIndex'];
  otherBumps: InitializeStrategyInstructionDataArgs['otherBumps'];
  strategyType: InitializeStrategyInstructionDataArgs['strategyType'];
};

export function getInitializeStrategyInstruction<
  TAccountVault extends string,
  TAccountStrategyProgram extends string,
  TAccountStrategy extends string,
  TAccountReserve extends string,
  TAccountCollateralVault extends string,
  TAccountCollateralMint extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: InitializeStrategyInput<
    TAccountVault,
    TAccountStrategyProgram,
    TAccountStrategy,
    TAccountReserve,
    TAccountCollateralVault,
    TAccountCollateralMint,
    TAccountAdmin,
    TAccountSystemProgram,
    TAccountRent,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeStrategyInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountStrategyProgram,
  TAccountStrategy,
  TAccountReserve,
  TAccountCollateralVault,
  TAccountCollateralMint,
  TAccountAdmin,
  TAccountSystemProgram,
  TAccountRent,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    strategyProgram: {
      value: input.strategyProgram ?? null,
      isWritable: false,
    },
    strategy: { value: input.strategy ?? null, isWritable: true },
    reserve: { value: input.reserve ?? null, isWritable: true },
    collateralVault: { value: input.collateralVault ?? null, isWritable: true },
    collateralMint: { value: input.collateralMint ?? null, isWritable: false },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.strategyProgram),
      getAccountMeta(accounts.strategy),
      getAccountMeta(accounts.reserve),
      getAccountMeta(accounts.collateralVault),
      getAccountMeta(accounts.collateralMint),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeStrategyInstructionDataEncoder().encode(
      args as InitializeStrategyInstructionDataArgs
    ),
  } as InitializeStrategyInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountStrategyProgram,
    TAccountStrategy,
    TAccountReserve,
    TAccountCollateralVault,
    TAccountCollateralMint,
    TAccountAdmin,
    TAccountSystemProgram,
    TAccountRent,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeStrategyInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Vault account */
    vault: TAccountMetas[0];
    strategyProgram: TAccountMetas[1];
    /** Strategy account */
    strategy: TAccountMetas[2];
    reserve: TAccountMetas[3];
    /** Collateral vault account */
    collateralVault: TAccountMetas[4];
    /** Collateral mint account */
    collateralMint: TAccountMetas[5];
    /** Admin account */
    admin: TAccountMetas[6];
    /** System program account */
    systemProgram: TAccountMetas[7];
    /** Rent account */
    rent: TAccountMetas[8];
    /** Token program account */
    tokenProgram: TAccountMetas[9];
  };
  data: InitializeStrategyInstructionData;
};

export function parseInitializeStrategyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeStrategyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      strategyProgram: getNextAccount(),
      strategy: getNextAccount(),
      reserve: getNextAccount(),
      collateralVault: getNextAccount(),
      collateralMint: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializeStrategyInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

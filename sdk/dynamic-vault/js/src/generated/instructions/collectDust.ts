/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_DUST_DISCRIMINATOR = new Uint8Array([
  246, 149, 21, 82, 160, 74, 254, 240,
]);

export function getCollectDustDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_DUST_DISCRIMINATOR
  );
}

export type CollectDustInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountTokenVault extends string | IAccountMeta<string> = string,
  TAccountTokenAdmin extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountTokenAdmin extends string
        ? WritableAccount<TAccountTokenAdmin>
        : TAccountTokenAdmin,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectDustInstructionData = { discriminator: ReadonlyUint8Array };

export type CollectDustInstructionDataArgs = {};

export function getCollectDustInstructionDataEncoder(): Encoder<CollectDustInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: COLLECT_DUST_DISCRIMINATOR })
  );
}

export function getCollectDustInstructionDataDecoder(): Decoder<CollectDustInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectDustInstructionDataCodec(): Codec<
  CollectDustInstructionDataArgs,
  CollectDustInstructionData
> {
  return combineCodec(
    getCollectDustInstructionDataEncoder(),
    getCollectDustInstructionDataDecoder()
  );
}

export type CollectDustInput<
  TAccountVault extends string = string,
  TAccountTokenVault extends string = string,
  TAccountTokenAdmin extends string = string,
  TAccountAdmin extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** vault */
  vault: Address<TAccountVault>;
  /** Token vault, must be different from vault.token_vault */
  tokenVault: Address<TAccountTokenVault>;
  /** token admin, enforce owner is admin to avoid mistake */
  tokenAdmin: Address<TAccountTokenAdmin>;
  /** admin */
  admin: TransactionSigner<TAccountAdmin>;
  /** token_program */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCollectDustInstruction<
  TAccountVault extends string,
  TAccountTokenVault extends string,
  TAccountTokenAdmin extends string,
  TAccountAdmin extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof VAULT_PROGRAM_ADDRESS,
>(
  input: CollectDustInput<
    TAccountVault,
    TAccountTokenVault,
    TAccountTokenAdmin,
    TAccountAdmin,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectDustInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountTokenVault,
  TAccountTokenAdmin,
  TAccountAdmin,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: false },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    tokenAdmin: { value: input.tokenAdmin ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.tokenAdmin),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCollectDustInstructionDataEncoder().encode({}),
  } as CollectDustInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountTokenVault,
    TAccountTokenAdmin,
    TAccountAdmin,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCollectDustInstruction<
  TProgram extends string = typeof VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** vault */
    vault: TAccountMetas[0];
    /** Token vault, must be different from vault.token_vault */
    tokenVault: TAccountMetas[1];
    /** token admin, enforce owner is admin to avoid mistake */
    tokenAdmin: TAccountMetas[2];
    /** admin */
    admin: TAccountMetas[3];
    /** token_program */
    tokenProgram: TAccountMetas[4];
  };
  data: CollectDustInstructionData;
};

export function parseCollectDustInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectDustInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      tokenVault: getNextAccount(),
      tokenAdmin: getNextAccount(),
      admin: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCollectDustInstructionDataDecoder().decode(instruction.data),
  };
}

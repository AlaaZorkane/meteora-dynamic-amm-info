/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  getStrategyTypeDecoder,
  getStrategyTypeEncoder,
  type StrategyType,
  type StrategyTypeArgs,
} from '../types';

export const STRATEGY_DISCRIMINATOR = new Uint8Array([
  174, 110, 39, 119, 82, 106, 169, 102,
]);

export function getStrategyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STRATEGY_DISCRIMINATOR);
}

export type Strategy = {
  discriminator: ReadonlyUint8Array;
  /** Lending pool address, that the strategy will deposit/withdraw balance */
  reserve: Address;
  /** The token account, that holds the collateral token */
  collateralVault: Address;
  /** Specify type of strategy */
  strategyType: StrategyType;
  /** The liquidity in strategy at the time vault deposit/withdraw from a lending protocol */
  currentLiquidity: bigint;
  /** Hold some bumps, in case the strategy needs to use other seeds to sign a CPI call. */
  bumps: ReadonlyUint8Array;
  /** Vault address, that the strategy belongs */
  vault: Address;
  /** If we remove strategy by remove_strategy2 endpoint, this account will be never added again */
  isDisable: number;
};

export type StrategyArgs = {
  /** Lending pool address, that the strategy will deposit/withdraw balance */
  reserve: Address;
  /** The token account, that holds the collateral token */
  collateralVault: Address;
  /** Specify type of strategy */
  strategyType: StrategyTypeArgs;
  /** The liquidity in strategy at the time vault deposit/withdraw from a lending protocol */
  currentLiquidity: number | bigint;
  /** Hold some bumps, in case the strategy needs to use other seeds to sign a CPI call. */
  bumps: ReadonlyUint8Array;
  /** Vault address, that the strategy belongs */
  vault: Address;
  /** If we remove strategy by remove_strategy2 endpoint, this account will be never added again */
  isDisable: number;
};

export function getStrategyEncoder(): Encoder<StrategyArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reserve', getAddressEncoder()],
      ['collateralVault', getAddressEncoder()],
      ['strategyType', getStrategyTypeEncoder()],
      ['currentLiquidity', getU64Encoder()],
      ['bumps', fixEncoderSize(getBytesEncoder(), 10)],
      ['vault', getAddressEncoder()],
      ['isDisable', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STRATEGY_DISCRIMINATOR })
  );
}

export function getStrategyDecoder(): Decoder<Strategy> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reserve', getAddressDecoder()],
    ['collateralVault', getAddressDecoder()],
    ['strategyType', getStrategyTypeDecoder()],
    ['currentLiquidity', getU64Decoder()],
    ['bumps', fixDecoderSize(getBytesDecoder(), 10)],
    ['vault', getAddressDecoder()],
    ['isDisable', getU8Decoder()],
  ]);
}

export function getStrategyCodec(): Codec<StrategyArgs, Strategy> {
  return combineCodec(getStrategyEncoder(), getStrategyDecoder());
}

export function decodeStrategy<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Strategy, TAddress>;
export function decodeStrategy<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Strategy, TAddress>;
export function decodeStrategy<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Strategy, TAddress> | MaybeAccount<Strategy, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStrategyDecoder()
  );
}

export async function fetchStrategy<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Strategy, TAddress>> {
  const maybeAccount = await fetchMaybeStrategy(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStrategy<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Strategy, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStrategy(maybeAccount);
}

export async function fetchAllStrategy(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Strategy>[]> {
  const maybeAccounts = await fetchAllMaybeStrategy(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStrategy(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Strategy>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStrategy(maybeAccount));
}

export function getStrategySize(): number {
  return 124;
}

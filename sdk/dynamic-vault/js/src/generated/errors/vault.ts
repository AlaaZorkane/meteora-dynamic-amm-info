/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { VAULT_PROGRAM_ADDRESS } from '../programs';

/** VaultIsDisabled: Vault is disabled */
export const VAULT_ERROR__VAULT_IS_DISABLED = 0x1770; // 6000
/** ExceededSlippage: Exceeded slippage tolerance */
export const VAULT_ERROR__EXCEEDED_SLIPPAGE = 0x1771; // 6001
/** StrategyIsNotExisted: Strategy is not existed */
export const VAULT_ERROR__STRATEGY_IS_NOT_EXISTED = 0x1772; // 6002
/** UnAuthorized: UnAuthorized */
export const VAULT_ERROR__UN_AUTHORIZED = 0x1773; // 6003
/** MathOverflow: Math operation overflow */
export const VAULT_ERROR__MATH_OVERFLOW = 0x1774; // 6004
/** ProtocolIsNotSupported: Protocol is not supported */
export const VAULT_ERROR__PROTOCOL_IS_NOT_SUPPORTED = 0x1775; // 6005
/** UnMatchReserve: Reserve does not support token mint */
export const VAULT_ERROR__UN_MATCH_RESERVE = 0x1776; // 6006
/** InvalidLockedProfitDegradation: lockedProfitDegradation is invalid */
export const VAULT_ERROR__INVALID_LOCKED_PROFIT_DEGRADATION = 0x1777; // 6007
/** MaxStrategyReached: Maximum number of strategies have been reached */
export const VAULT_ERROR__MAX_STRATEGY_REACHED = 0x1778; // 6008
/** StrategyExisted: Strategy existed */
export const VAULT_ERROR__STRATEGY_EXISTED = 0x1779; // 6009
/** InvalidUnmintAmount: Invalid unmint amount */
export const VAULT_ERROR__INVALID_UNMINT_AMOUNT = 0x177a; // 6010
/** InvalidAccountsForStrategy: Invalid accounts for strategy */
export const VAULT_ERROR__INVALID_ACCOUNTS_FOR_STRATEGY = 0x177b; // 6011
/** InvalidBump: Invalid bump */
export const VAULT_ERROR__INVALID_BUMP = 0x177c; // 6012
/** AmountMustGreaterThanZero: Amount must be greater than 0 */
export const VAULT_ERROR__AMOUNT_MUST_GREATER_THAN_ZERO = 0x177d; // 6013
/** MangoIsNotSupportedAnymore: Mango is not supported anymore */
export const VAULT_ERROR__MANGO_IS_NOT_SUPPORTED_ANYMORE = 0x177e; // 6014
/** StrategyIsNotSupported: Strategy is not supported */
export const VAULT_ERROR__STRATEGY_IS_NOT_SUPPORTED = 0x177f; // 6015
/** PayAmountIsExeeced: Pay amount is exceeded */
export const VAULT_ERROR__PAY_AMOUNT_IS_EXEECED = 0x1780; // 6016
/** FeeVaultIsNotSet: Fee vault is not set */
export const VAULT_ERROR__FEE_VAULT_IS_NOT_SET = 0x1781; // 6017
/** LendingAssertionViolation: deposit amount in lending is not matched */
export const VAULT_ERROR__LENDING_ASSERTION_VIOLATION = 0x1782; // 6018
/** HaveMoneyInLending: Cannot remove strategy becase we have some in lending */
export const VAULT_ERROR__HAVE_MONEY_IN_LENDING = 0x1783; // 6019

export type VaultError =
  | typeof VAULT_ERROR__AMOUNT_MUST_GREATER_THAN_ZERO
  | typeof VAULT_ERROR__EXCEEDED_SLIPPAGE
  | typeof VAULT_ERROR__FEE_VAULT_IS_NOT_SET
  | typeof VAULT_ERROR__HAVE_MONEY_IN_LENDING
  | typeof VAULT_ERROR__INVALID_ACCOUNTS_FOR_STRATEGY
  | typeof VAULT_ERROR__INVALID_BUMP
  | typeof VAULT_ERROR__INVALID_LOCKED_PROFIT_DEGRADATION
  | typeof VAULT_ERROR__INVALID_UNMINT_AMOUNT
  | typeof VAULT_ERROR__LENDING_ASSERTION_VIOLATION
  | typeof VAULT_ERROR__MANGO_IS_NOT_SUPPORTED_ANYMORE
  | typeof VAULT_ERROR__MATH_OVERFLOW
  | typeof VAULT_ERROR__MAX_STRATEGY_REACHED
  | typeof VAULT_ERROR__PAY_AMOUNT_IS_EXEECED
  | typeof VAULT_ERROR__PROTOCOL_IS_NOT_SUPPORTED
  | typeof VAULT_ERROR__STRATEGY_EXISTED
  | typeof VAULT_ERROR__STRATEGY_IS_NOT_EXISTED
  | typeof VAULT_ERROR__STRATEGY_IS_NOT_SUPPORTED
  | typeof VAULT_ERROR__UN_AUTHORIZED
  | typeof VAULT_ERROR__UN_MATCH_RESERVE
  | typeof VAULT_ERROR__VAULT_IS_DISABLED;

let vaultErrorMessages: Record<VaultError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  vaultErrorMessages = {
    [VAULT_ERROR__AMOUNT_MUST_GREATER_THAN_ZERO]: `Amount must be greater than 0`,
    [VAULT_ERROR__EXCEEDED_SLIPPAGE]: `Exceeded slippage tolerance`,
    [VAULT_ERROR__FEE_VAULT_IS_NOT_SET]: `Fee vault is not set`,
    [VAULT_ERROR__HAVE_MONEY_IN_LENDING]: `Cannot remove strategy becase we have some in lending`,
    [VAULT_ERROR__INVALID_ACCOUNTS_FOR_STRATEGY]: `Invalid accounts for strategy`,
    [VAULT_ERROR__INVALID_BUMP]: `Invalid bump`,
    [VAULT_ERROR__INVALID_LOCKED_PROFIT_DEGRADATION]: `lockedProfitDegradation is invalid`,
    [VAULT_ERROR__INVALID_UNMINT_AMOUNT]: `Invalid unmint amount`,
    [VAULT_ERROR__LENDING_ASSERTION_VIOLATION]: `deposit amount in lending is not matched`,
    [VAULT_ERROR__MANGO_IS_NOT_SUPPORTED_ANYMORE]: `Mango is not supported anymore`,
    [VAULT_ERROR__MATH_OVERFLOW]: `Math operation overflow`,
    [VAULT_ERROR__MAX_STRATEGY_REACHED]: `Maximum number of strategies have been reached`,
    [VAULT_ERROR__PAY_AMOUNT_IS_EXEECED]: `Pay amount is exceeded`,
    [VAULT_ERROR__PROTOCOL_IS_NOT_SUPPORTED]: `Protocol is not supported`,
    [VAULT_ERROR__STRATEGY_EXISTED]: `Strategy existed`,
    [VAULT_ERROR__STRATEGY_IS_NOT_EXISTED]: `Strategy is not existed`,
    [VAULT_ERROR__STRATEGY_IS_NOT_SUPPORTED]: `Strategy is not supported`,
    [VAULT_ERROR__UN_AUTHORIZED]: `UnAuthorized`,
    [VAULT_ERROR__UN_MATCH_RESERVE]: `Reserve does not support token mint`,
    [VAULT_ERROR__VAULT_IS_DISABLED]: `Vault is disabled`,
  };
}

export function getVaultErrorMessage(code: VaultError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (vaultErrorMessages as Record<VaultError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isVaultError<TProgramErrorCode extends VaultError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VAULT_PROGRAM_ADDRESS,
    code
  );
}
